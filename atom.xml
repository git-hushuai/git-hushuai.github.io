<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://git-hushuai.github.io</id>
    <title>shuaike</title>
    <updated>2019-06-18T03:11:58.521Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://git-hushuai.github.io"/>
    <link rel="self" href="https://git-hushuai.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://git-hushuai.github.io/images/avatar.png</logo>
    <icon>https://git-hushuai.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, shuaike</rights>
    <entry>
        <title type="html"><![CDATA[iOS Class对象解析]]></title>
        <id>https://git-hushuai.github.io/post/ios-about-class</id>
        <link href="https://git-hushuai.github.io/post/ios-about-class">
        </link>
        <updated>2019-06-18T03:07:16.000Z</updated>
        <content type="html"><![CDATA[<p>不管是类对象还是元类对象，类型都是Class，class和meta-class的底层都是objc_class结构体的指针，内存中就是结构体。</p>
<p>我们查看objc_class内部，可以看到这段在底层原理中经常出现的代码：</p>
<pre><code>struct objc_class {
    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;

#if !__OBJC2__
    Class _Nullable super_class                              OBJC2_UNAVAILABLE;
    const char * _Nonnull name                               OBJC2_UNAVAILABLE;
    long version                                             OBJC2_UNAVAILABLE;
    long info                                                OBJC2_UNAVAILABLE;
    long instance_size                                       OBJC2_UNAVAILABLE;
    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;
    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;
    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;
    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;
#endif

} OBJC2_UNAVAILABLE;
/* Use `Class` instead of `struct objc_class *` */

</code></pre>
<p><strong>objc_class 定义:</strong></p>
<p><img src="/Users/shuaike/Desktop/F993032A-77C5-4CBA-B0E5-BAB8585DEF64.png" alt=""></p>
<p><strong>objc_object 定义：</strong></p>
<p>![](/Users/shuaike/Library/Containers/com.tencent.qq/Data/Library/Application Support/QQ/Users/718401263/QQ/Temp.db/04F54C3E-C08D-4E35-8DF8-1FBFAB834F29.png)</p>
<p><strong>class_rw_t 定义：</strong></p>
<p>![](/Users/shuaike/Library/Containers/com.tencent.qq/Data/Library/Application Support/QQ/Users/718401263/QQ/Temp.db/0B131962-9CAA-4E00-A84E-6D54E2E3B656.png)</p>
<p>可以看到，在class_rw_t 中存储着类的</p>
<ul>
<li>
<p>在objc_class 结构体中的注释中写到class_data_bits_t相当于class_rw_t指针加上rr/alloc标志</p>
</li>
<li>
<p>方法列表，</p>
</li>
<li>
<p>属性列表，</p>
</li>
<li>
<p>协议列表</p>
</li>
</ul>
<p>而<strong>class_rw_t</strong>是通过bits调用data得到的，我们来到data方法内部实现，我们可以看到，data函数内部仅仅是对bits进行&amp;FAST_DATA_MASK进行位运算操作,只取其中的 [3, 47] 位转换成 class_rw_t * 返回。</p>
<p>在 x86_64 架构上，Mac OS 只使用了其中的 47 位来为对象分配地址。而且由于地址要按字节在内存中按字节对齐，所以掩码的后三位都是 0。</p>
<p>因为class_rw_t * 指针只存于第【3，47】位，所以可以使用最后三位来存储关于当前类的其他信息：</p>
<p><img src="/Users/shuaike/Desktop/1463472850397719.jpg" alt=""></p>
<pre><code>// class is a Swift class
#define FAST_IS_SWIFT           (1UL&lt;&lt;0)
// class's instances requires raw isa
#define FAST_REQUIRES_RAW_ISA   (1UL&lt;&lt;1)
// class or superclass has .cxx_destruct implementation
//   This bit is aligned with isa_t-&gt;hasCxxDtor to save an instruction.
#define FAST_HAS_CXX_DTOR       (1UL&lt;&lt;2)
// data pointer
#define FAST_DATA_MASK          0x00007ffffffffff8UL
</code></pre>
<ul>
<li>
<p>isSwift(): FAST_IS_SWIFT 用于判断 Swift 类</p>
</li>
<li>
<p>hasDefaultRR()：FAST_HAS_DEFAULT_RR 当前类或者父类含有默认的 retain/release/autorelease/retainCount/_tryRetain/_isDeallocating/retainWeakReference/allowsWeakReference 方法</p>
</li>
<li>
<p>requiresRawIsa()：FAST_REQUIRES_RAW_ISA 当前类的实例需要 raw isa</p>
</li>
</ul>
<p>执行 class_data_bits_t 结构体中的 data() 方法或者调用 objc_class 中的 data() 方法会返回同一个 class_rw_t * 指针，因为 objc_class 中的方法只是对 class_data_bits_t 中对应方法的封装。</p>
<p>![](/Users/shuaike/Library/Containers/com.tencent.qq/Data/Library/Application Support/QQ/Users/718401263/QQ/Temp.db/4BCD0267-CC9F-4865-BE67-123783DCCB96.png)</p>
<p>从class_rw_t结构体中可以看到其中有一个指向常量的指针ro,其中存储了当前类在编译期就已经确定的属性、方法以及遵循的协议。</p>
<p><strong>class_ro_t 定义：</strong></p>
<p>![](/Users/shuaike/Library/Containers/com.tencent.qq/Data/Library/Application Support/QQ/Users/718401263/QQ/Temp.db/B8130D07-F3BA-4FDD-BEF0-E905CC5F5E02.png)</p>
<p>在编译期类的结构中的class_data_bits_t *data指向的是一个class_ro_t *指针。</p>
<p><img src="/Users/shuaike/Desktop/1463472924453436.jpg" alt=""></p>
<p>然后在类加载的过程中在realizeClass方法中：</p>
<ul>
<li>
<p>从 class_data_bits_t 调用 data 方法，将结果从 class_rw_t 强制转换为 class_ro_t 指针</p>
</li>
<li>
<p>初始化一个 class_rw_t 结构体</p>
</li>
<li>
<p>设置结构体 ro 的值以及 flag</p>
</li>
<li>
<p>最后设置正确的 data。</p>
</li>
</ul>
<pre><code>/***********************************************************************
* realizeClass
* Performs first-time initialization on class cls, 
* including allocating its read-write data.
* Returns the real class structure for the class. 
* Locking: runtimeLock must be write-locked by the caller
**********************************************************************/
static Class realizeClass(Class cls)
{
    runtimeLock.assertWriting();

    const class_ro_t *ro;
    class_rw_t *rw;
    Class supercls;
    Class metacls;
    bool isMeta;

    if (!cls) return nil;
    if (cls-&gt;isRealized()) return cls;
    assert(cls == remapClass(cls));

    // fixme verify class is not in an un-dlopened part of the shared cache?

    ro = (const class_ro_t *)cls-&gt;data();
    if (ro-&gt;flags &amp; RO_FUTURE) {
        // This was a future class. rw data is already allocated.
        rw = cls-&gt;data();
        ro = cls-&gt;data()-&gt;ro;
        cls-&gt;changeInfo(RW_REALIZED|RW_REALIZING, RW_FUTURE);
    } else {
        // Normal class. Allocate writeable class data.
        rw = (class_rw_t *)calloc(sizeof(class_rw_t), 1);
        rw-&gt;ro = ro;
        rw-&gt;flags = RW_REALIZED|RW_REALIZING;
        cls-&gt;setData(rw);
    }

    isMeta = ro-&gt;flags &amp; RO_META;

    rw-&gt;version = isMeta ? 7 : 0;  // old runtime went up to 6


    // Choose an index for this class.
    // Sets cls-&gt;instancesRequireRawIsa if indexes no more indexes are available
    cls-&gt;chooseClassArrayIndex();

    if (PrintConnecting) {
        _objc_inform(&quot;CLASS: realizing class '%s'%s %p %p #%u&quot;, 
                     cls-&gt;nameForLogging(), isMeta ? &quot; (meta)&quot; : &quot;&quot;, 
                     (void*)cls, ro, cls-&gt;classArrayIndex());
    }

    // Realize superclass and metaclass, if they aren't already.
    // This needs to be done after RW_REALIZED is set above, for root classes.
    // This needs to be done after class index is chosen, for root metaclasses.
    supercls = realizeClass(remapClass(cls-&gt;superclass));
    metacls = realizeClass(remapClass(cls-&gt;ISA()));

#if SUPPORT_NONPOINTER_ISA
    // Disable non-pointer isa for some classes and/or platforms.
    // Set instancesRequireRawIsa.
    bool instancesRequireRawIsa = cls-&gt;instancesRequireRawIsa();
    bool rawIsaIsInherited = false;
    static bool hackedDispatch = false;

    if (DisableNonpointerIsa) {
        // Non-pointer isa disabled by environment or app SDK version
        instancesRequireRawIsa = true;
    }
    else if (!hackedDispatch  &amp;&amp;  !(ro-&gt;flags &amp; RO_META)  &amp;&amp;  
             0 == strcmp(ro-&gt;name, &quot;OS_object&quot;)) 
    {
        // hack for libdispatch et al - isa also acts as vtable pointer
        hackedDispatch = true;
        instancesRequireRawIsa = true;
    }
    else if (supercls  &amp;&amp;  supercls-&gt;superclass  &amp;&amp;  
             supercls-&gt;instancesRequireRawIsa()) 
    {
        // This is also propagated by addSubclass() 
        // but nonpointer isa setup needs it earlier.
        // Special case: instancesRequireRawIsa does not propagate 
        // from root class to root metaclass
        instancesRequireRawIsa = true;
        rawIsaIsInherited = true;
    }
    
    if (instancesRequireRawIsa) {
        cls-&gt;setInstancesRequireRawIsa(rawIsaIsInherited);
    }
// SUPPORT_NONPOINTER_ISA
#endif

    // Update superclass and metaclass in case of remapping
    cls-&gt;superclass = supercls;
    cls-&gt;initClassIsa(metacls);

    // Reconcile instance variable offsets / layout.
    // This may reallocate class_ro_t, updating our ro variable.
    if (supercls  &amp;&amp;  !isMeta) reconcileInstanceVariables(cls, supercls, ro);

    // Set fastInstanceSize if it wasn't set already.
    cls-&gt;setInstanceSize(ro-&gt;instanceSize);

    // Copy some flags from ro to rw
    if (ro-&gt;flags &amp; RO_HAS_CXX_STRUCTORS) {
        cls-&gt;setHasCxxDtor();
        if (! (ro-&gt;flags &amp; RO_HAS_CXX_DTOR_ONLY)) {
            cls-&gt;setHasCxxCtor();
        }
    }

    // Connect this class to its superclass's subclass lists
    if (supercls) {
        addSubclass(supercls, cls);
    } else {
        addRootClass(cls);
    }

    // Attach categories
    methodizeClass(cls);

    return cls;
}
</code></pre>
<p>下图是realizeClass方法执行过后的类所占用的内存的布局，通过对比可以看到：</p>
<p><img src="/Users/shuaike/Desktop/1463473009766529.jpg" alt=""></p>
<p>但是，在这段代码运行之后class_rw_t中的方法、属性以及协议列表均为空，这时需要realizeClass调用methodizeClass方法来将类自己实现的方法（包括分类）、属性和遵循的协议加载到methods、properties和protocols列表中。</p>
<p>总结：</p>
<ul>
<li>
<p>类在内存中的位置是在编译期决定的，在之后修改代码，也不会改变内存中的位置。</p>
</li>
<li>
<p>类的方法、属性以及协议在编译期存放到了”错误“的位置，直到realizeClass执行之后，才放到了class_rw_t指向的只读区域class_ro_t,这样我们即可在运行时为class_rw_t添加方法，也不会影响类的只读结构。</p>
</li>
<li>
<p>在class_ro_t 中的属性在运行期间就不能改变了，再添加方法时，会修改class_rw_t中的methods列表，而不是class_ro_t中的baseMthods。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机网络]]></title>
        <id>https://git-hushuai.github.io/post/about-computer-networks</id>
        <link href="https://git-hushuai.github.io/post/about-computer-networks">
        </link>
        <updated>2019-06-13T04:03:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="网络的网络">网络的网络</h3>
<hr>
<p>网络把主机连接起来，而互联网把多种不同的网络连接起来，因此互联网是网络的网络。</p>
<p><img src="/Users/ewg_mac1/Desktop/network-of-networks.gif" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/network-of-networks.gif" alt=""></p>
<h3 id="isp">ISP</h3>
<hr>
<p>互联网服务提供商ISP可以从互联网管理机构获得很多IP地址，同时拥有通信线路以及路由器等联网设备，个人或机构向ISP缴纳一定的费用就可以接入互联网。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/72be01cd-41ae-45f7-99b9-a8d284e44dd4.png" alt=""></p>
<p>目前的互联网是一种多层次ISP结构，ISP根据覆盖面积的大小分为第一层ISP、区域ISP和接入ISP。互联网交换点IXP允许两个ISP直接相连而不用经过第三个ISP。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/3be42601-9d33-4d29-8358-a9d16453af93.png" alt=""></p>
<h3 id="计算机网络体系结构">计算机网络体系结构</h3>
<hr>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/0fa6c237-a909-4e2a-a771-2c5485cd8ce0.png"></img></p>
<h4 id="1-五层协议">1、五层协议</h4>
<hr>
<ul>
<li>
<p>**应用层：**为特定应用程序提供数据传输服务，例如HTTP、DNS等协议。数据单位为报文。</p>
</li>
<li>
<p>**传输层：**为进程提供通用数据传输服务，由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。传输层包括两种协议：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>分类</th>
<th></th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>TCP</td>
<td>传输控制协议</td>
<td>提供面向连接、可靠的数据传输服务，数据单位为报文段，TCP主要提供完整性服务</td>
</tr>
<tr>
<td>UDP</td>
<td>用户数据包协议</td>
<td>提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报，UDP主要提供及时性服务</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>**网络层：**为主机提供数据传输服务，而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据包封装成分组。</p>
</li>
<li>
<p>**数据链路层：**网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务，数据链路层把网络层传下来的分组封装成帧。</p>
</li>
<li>
<p>**物理层：**考虑到怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体，物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p>
</li>
</ul>
<h4 id="2-osi">2、OSI</h4>
<hr>
<p>其中表示层和会话层用途如下：</p>
<ul>
<li>
<p>表示层：数据压缩、加密以及数据描述，这使得应用程序不必关心在各主机中数据内部格式不同的问题。</p>
</li>
<li>
<p>会话层：建立以及管理回话。</p>
</li>
</ul>
<p>五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。</p>
<h4 id="3-tcpip">3、TCP/IP</h4>
<hr>
<p>它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p>
<p>TCP/IP体系结构不严格遵循OSI分层概念，应用层可能会直接使用IP层或者网络接口层。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/48d79be8-085b-4862-8a9d-18402eb93b31.png" alt=""></p>
<h4 id="4-数据在各层之间的传递过程">4、数据在各层之间的传递过程</h4>
<hr>
<p>在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p>
<p>路由器只有下面三层协议，因为路由器位于网路核心中，不需要为进程或者应用程序提供服务，因此也就不要传输层和应用层。</p>
<hr>
<h1 id="1-应用层">1、应用层</h1>
<h2 id="域名系统">域名系统</h2>
<p style="font-size:16px;color:#333;font-weight:600;">DNS 是一个分布式数据库，提供了主机名和IP地址之间相互转换的服务，这里的分布式数据库是指，每个站点只保留它自己的那部分数据。</p>
<p style="font-size:15px;color:#333;">域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/b54eeb16-0b0e-484c-be62-306f57c40d77.jpg" alt=""></p>
<p>DNS可以使用UDP或者TCP进行传输，使用的端口号都为53，大多数情况下DNS使用UDP进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性，在两种情况下会使用TCP进行传输：</p>
<ul>
<li>如果返回的响应超过512字节（UDP最大只支持512字节的数据）。</li>
<li>区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。</li>
</ul>
<h2 id="文本传送协议">文本传送协议</h2>
<p><strong>FTP</strong>使用<strong>TCP</strong>进行连接，它需要两个连接来传送一个文件：</p>
<ul>
<li>控制连接：服务器打开端口号21等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。</li>
<li>数据连接：用来传送一个文件数据。</li>
</ul>
<p>根据数据连接是否是服务器端主动建立，FTP有主动和被动两种模式：</p>
<ul>
<li>主动模式：服务器端主动建立数据连接，其中服务器端的端口号为20，客户端的端口号随机，但是必须大于1024，因为0~1023是熟知端口号。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/03f47940-3843-4b51-9e42-5dcaff44858b.jpg" alt=""></p>
<ul>
<li>被动模式：客户端主动建立数据连接，其中客户端的端口号有客户端自己指定，服务端的端口号随机。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/be5c2c61-86d2-4dba-a289-b48ea23219de.jpg" alt=""></p>
<p>主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙，被动模式只需要服务端开放端口即可，无需客户端配置防火墙，但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。</p>
<h2 id="动态主机配置协议">动态主机配置协议</h2>
<p>DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。</p>
<p>DHCP配置的内容不仅是IP地址，还包括子网掩码、网关IP地址。</p>
<p>DHCP工作过程如下：</p>
<ul>
<li>
<p>客户端发送Discover报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。</p>
</li>
<li>
<p>DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。</p>
</li>
<li>
<p>如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。
DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/23219e4c-9fc0-4051-b33a-2bd95bf054ab.jpg" alt=""></p>
<h2 id="远程登录协议">远程登录协议</h2>
<p>TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。</p>
<p>TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。</p>
<h2 id="电子邮件协议">电子邮件协议</h2>
<p>一个电子邮件系统有三部分组成：用户代理、邮件服务器以及邮件协议。</p>
<p>邮件协议包含发送协议和读取协议，发送协议常用SMTP，读取协议常用POP3和IMAP。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/7b3efa99-d306-4982-8cfb-e7153c33aab4.png" alt=""></p>
<h4 id="1-smtp">1、SMTP</h4>
<p>SMTP协议只能发送ASCII码，而互联网邮件扩充MIME可以发送二进制文件，MIME并没有改动或者取代SMTP，而是增加邮件主体的结构，定义了非ASCII码的编码规则。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/ed5522bb-3a60-481c-8654-43e7195a48fe.png" alt=""></p>
<h4 id="2-pop3">2、POP3</h4>
<p>POP3的特点是只要用户从服务器上读取了邮件，就把该邮件删除。</p>
<h4 id="3-imap">3、IMAP</h4>
<p>IMAP协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除，IMAP这种做法可以让用户随时随地去访问服务器上的邮件。</p>
<h2 id="常用端口">常用端口:</h2>
<table>
<thead>
<tr>
<th>应用</th>
<th>应用层协议</th>
<th>端口号</th>
<th>传输层协议</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>域名解析</td>
<td>DNS</td>
<td>53</td>
<td>UDP/TCP</td>
<td>长度超过512字节时使用TCP</td>
</tr>
<tr>
<td>动态主机配置协议</td>
<td>DHCP</td>
<td>67/68</td>
<td>UDP</td>
<td></td>
</tr>
<tr>
<td>简单网络管理协议</td>
<td>SNMP</td>
<td>161/162</td>
<td>UDP</td>
<td></td>
</tr>
<tr>
<td>文件传输协议</td>
<td>FTP</td>
<td>20/21</td>
<td>TCP</td>
<td>控住连接21，数据连接20</td>
</tr>
<tr>
<td>远程终端协议</td>
<td>TELNET</td>
<td>23</td>
<td>TCP</td>
<td></td>
</tr>
<tr>
<td>超文本传送协议</td>
<td>HTTP</td>
<td>80</td>
<td>TCP</td>
<td></td>
</tr>
<tr>
<td>简单邮件传送协议</td>
<td>SMTP</td>
<td>25</td>
<td>TCP</td>
<td></td>
</tr>
<tr>
<td>邮件读取协议</td>
<td>POP3</td>
<td>110</td>
<td>TCP</td>
<td></td>
</tr>
<tr>
<td>网际报文存取协议</td>
<td>IMAP</td>
<td>143</td>
<td>TCP</td>
<td></td>
</tr>
<tr>
<td>超文本传输安全协议</td>
<td>HTTPS</td>
<td>443</td>
<td>TCP</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="web页面请求过程">Web页面请求过程</h2>
<h4 id="1-dhcp配置主机信息">1. DHCP配置主机信息</h4>
<ul>
<li>假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。</li>
<li>主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。</li>
<li>该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。</li>
<li>该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。</li>
<li>连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。</li>
<li>该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。</li>
<li>主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。</li>
</ul>
<h4 id="2-arp解析mac地址">2、ARP解析MAC地址</h4>
<ul>
<li>
<p>主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。</p>
</li>
<li>
<p>主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。</p>
</li>
<li>
<p>该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。</p>
</li>
<li>
<p>该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。</p>
</li>
<li>
<p>DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。</p>
</li>
<li>
<p>主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。</p>
</li>
<li>
<p>网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。</p>
</li>
</ul>
<h4 id="3-dns解析域名">3、DNS解析域名</h4>
<ul>
<li>
<p>知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。</p>
</li>
<li>
<p>网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。</p>
</li>
<li>
<p>因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。</p>
</li>
<li>
<p>到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。</p>
</li>
<li>
<p>找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。</p>
</li>
</ul>
<h4 id="4-http请求页面">4、HTTP请求页面</h4>
<ul>
<li>
<p>有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。</p>
</li>
<li>
<p>在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。</p>
</li>
<li>
<p>HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。</p>
</li>
<li>
<p>连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。</p>
</li>
<li>
<p>HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。</p>
</li>
<li>
<p>浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。</p>
</li>
</ul>
<h1 id="2-传输层">2. 传输层</h1>
<p>网络层只是把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程，传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来是在两个传输层实体之间有一条端到端的逻辑通信信道。</p>
<h2 id="udp和tcp的特点">UDP和TCP的特点</h2>
<ul>
<li>
<p>用户数据报协议UDP(User Datagram Protocol)是无连接的，尽最大可能交付、没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加UDP首部），支持一对一、一对多、多对一和多对多的交互通信。</p>
</li>
<li>
<p>传输层协议TCP(Transmission Control Protocol)是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条TCP连接只能是点对点的（一对一）。</p>
</li>
</ul>
<h4 id="udp首部格式">UDP首部格式</h4>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/d4c3a4a1-0846-46ec-9cc3-eaddfca71254.jpg" alt=""></p>
<p>首部字段只有8个字节，包括源端口、目的端口、长度、校验和。12字节的伪首部是为了计算校验和临时添加的。</p>
<h4 id="tcp首部格式">TCP首部格式</h4>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/55dc4e84-573d-4c13-a765-52ed1dd251f9.png" alt=""></p>
<ul>
<li>
<p>**序号 ：**用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</p>
</li>
<li>
<p>**确认号 ：**期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</p>
</li>
<li>
<p>**数据偏移 ：**指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</p>
</li>
<li>
<p>**确认 ACK ：**当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</p>
</li>
<li>
<p>**同步 SYN ：**在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</p>
</li>
<li>
<p>**终止 FIN ：**用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</p>
</li>
<li>
<p>**窗口 ：**窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p>
</li>
</ul>
<h2 id="tcp的三次握手">TCP的三次握手</h2>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/e92d0ebc-7d46-413b-aec1-34a39602f787.png" alt=""></p>
<p>假设A为客户端，B为服务器端</p>
<ul>
<li>
<p>首先B处于LISTEN（监听）状态，等待客户的连接请求。</p>
<ol>
<li>
<p>A向B发送连接请求报文，SYN=1，ACK=0，选择一个初始序号x。</p>
</li>
<li>
<p>B收到连接请求报文，如果同意建立连接，则向A发送连接确认报文，SYN=1,ACK=1,确认号为x+1,同时也选择一个初始的序号y。</p>
</li>
<li>
<p>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</p>
</li>
<li>
<p>B 收到 A 的确认后，连接建立。</p>
</li>
</ol>
</li>
</ul>
<p><strong>三次握手的原因</strong></p>
<blockquote>
<p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p>
</blockquote>
<blockquote>
<p>客户端发送的连接如果在网络中滞留，那么就会隔很长一段时间才能收到服务端发回的连接确认，客户端等待一个超时重传时间之后，就会重新请求连接，但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就回去打开两个连接，如果有第三次握手，客户端会忽略服务器之后发送的滞留连接请求的连接确认，不进行第三次握手。因此就不会再次打开连接。</p>
</blockquote>
<h2 id="tcp的四次挥手">TCP的四次挥手</h2>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg" alt=""></p>
<p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单，并且不讨论ACK，因为ACK在连接建立之后都会为1.</p>
<ul>
<li>1、 A发送连接释放报文，FIN=1；</li>
<li>2、B收到之后发出确认，此时TCP属于半关闭状态，B能向A发送数据但是A不能向B发送数据。</li>
<li>3、当B不再需要连接时，发送链接释放报文，FIN=1；</li>
<li>4、A收到后发出确认，进入TIME-WAIT状态，等待2MSL（最大报文存活时间）后释放连接。</li>
<li>5、B收到A的确认后释放连接。</li>
</ul>
<h4 id="四次挥手的原因">四次挥手的原因：</h4>
<p>客户端发送了FIN连接释放报文之后，服务器收到了这个报文，就进入了CLOSE-WAIT状态，这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送FIN连接释放报文。</p>
<h4 id="time_wait">TIME_WAIT</h4>
<p>客户端接收到服务端的FIN报文后进入此状态，此时并不是直接进入CLOSED状态，还需要等待一个时间计时器设置的时间2MSL，这么做有两个理由：</p>
<ul>
<li>
<p>确保最后一个确认报文能够到达，如果B没有收到A发送来的确认报文，那么就会重新发送连接释放请求报文，A等待一段时间就是为了处理这种情况的发生。</p>
</li>
<li>
<p>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</p>
</li>
</ul>
<h2 id="tcp可靠传输">TCP可靠传输</h2>
<p>TCP使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p>
<p>一个报文段从发送再到接收确认所经过的时间称为往返时间RTT，加权平均往返时间RTTs计算如下：</p>
<p><img src="https://camo.githubusercontent.com/02e9a4a23b05bcf814d9e5d0c1b79a6bb5ae2aee/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f525454733d28312d61292a2852545473292b612a525454" alt=""></p>
<p>其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。</p>
<p>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：</p>
<p><img src="https://camo.githubusercontent.com/da3da0a6cad7ef2af7d7adcd2940277780c35325/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f52544f3d525454732b342a5254545f64" alt=""></p>
<p>其中 RTTd 为偏差的加权平均值。</p>
<h2 id="tcp滑动窗口">TCP滑动窗口</h2>
<p>窗口是缓存的一部分，用老暂时存放字节流，发送方和接收方各有一个窗口，接收方通过TCP报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。发送方根据这个值和其它信息设置自己的窗口大小。</p>
<p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收，如果发送窗口左部的字节已经发送并且受到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p>
<p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到字节为{31,34,35}，其中{31}按序到达，而{34,35}就不是，因此只对字节31进行确认，发送方得到一个字节的去二人后，就知道这个字节之前所有的字节都已经被接收。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/a3253deb-8d21-40a1-aae4-7d178e4aa319.jpg" alt=""></p>
<h2 id="tcp流量控制">TCP流量控制</h2>
<p>流量控制是为了控制发送方发送速率，保证接收方来得及接收</p>
<p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送效率，将窗口字段设置为0，则发送方不能发送数据。</p>
<h2 id="tcp-拥塞控制">TCP 拥塞控制</h2>
<p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高，因此当出现拥塞时，应当控制发送方的速率，这点和流量控制很像，但是出发点不同，流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/51e2ed95-65b8-4ae9-8af3-65602d452a25.jpg" alt=""></p>
<p>TCP主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复</p>
<p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口</p>
<p>为了便于讨论，我们做如下假设：</p>
<ul>
<li>接收方有足够大的接收缓存，因此不会发生流量控制。</li>
<li>虽然TCP的窗口基于字节，但是这里设窗口的大小单位为报文段。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/910f613f-514f-4534-87dd-9b4699d59d31.png" alt=""></p>
<h4 id="1-慢开始与拥塞避免">1. 慢开始与拥塞避免</h4>
<p>发送的最初执行慢开始，令cwnd=1,发送方只能发送一个报文段，当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 ...</p>
<p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p>
<p>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p>
<h4 id="2-快重传与快恢复">2. 快重传与快恢复</h4>
<p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认，例如已经接收到M1和M2，此时收到M4。应当发送对M2的确认。</p>
<p>在发送方，如果收到三个重复确认，那么可以确认下一个报文段丢失，此时执行快重传，立即重传下一个报文段，例如收到三个M2，则M3丢失，立即重传M3。</p>
<p>在这种情况下，只是丢失个别报文段，而不是网络拥塞，因此执行快恢复，令ssthresh=cwnd/2,cwnd=ssthresh，注意到此时直接进入拥塞避免。</p>
<p>慢开始和快恢复的快慢指的是cwnd的设定值，而不是cwnd的增长速率，慢开始cwnd设定为1，而快恢复cwnd设定为ssthresh。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/f61b5419-c94a-4df1-8d4d-aed9ae8cc6d5.png" alt=""></p>
<h1 id="3网络层">3.网络层</h1>
<p>因为网络层是整个互联网的核心，因此应当让网络层尽可能简单，网络层向上只提供灵活的、无连接的、尽最大努力交互的数据报服务。</p>
<p>使用IP协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/8d779ab7-ffcc-47c6-90ec-ede8260b2368.png" alt=""></p>
<p>与IP协议配套使用的还有三个协议：</p>
<ul>
<li>地址解析协议ARP（Address Resolution Protocol）</li>
<li>网际控制报文协议ICMP（Internet Control Message Protocol）</li>
<li>网际组管理协议IGMP(Internet Group Managerment Protocol)</li>
</ul>
<h3 id="ip数据报格式">IP数据报格式</h3>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg" alt=""></p>
<ul>
<li>
<p>版本：有4（IPv4）和6（IPv6）两个值；</p>
</li>
<li>
<p>首部长度：占4位，因此最大值是15，值为1表示是1个32位字的长度，也就是四字节，因为固定部分长度为20字节，因此该值最小为5，如果可选字段的长度不是4字节的整数倍，就用尾部的填充部分来填充。</p>
</li>
<li>
<p>区分服务：用来获得更好的服务，一般情况下不用。</p>
</li>
<li>
<p>总长度：包括首部长度和数据部分长度。</p>
</li>
<li>
<p>生存时间：TTL，它的存在是为了防止无法交付的数据在互联网中不断的兜圈子，以路由器跳数为单位，当TTL为0时就丢弃数据报。</p>
</li>
<li>
<p>协议：指出携带的数据应该上交给哪个协议进行处理，例如ICMP、TCP/UDP等。</p>
</li>
<li>
<p>首部校验和：因为数据报每经过一个路由器，都要重新计算校验和，因此校验和不包含数据部分可以减少计算的工作量。</p>
</li>
<li>
<p>标识：在数据报长度过长从而产生分片的情况下，相同数据报的不同分片具有相同的标识符。</p>
</li>
<li>
<p>片偏移：和标识符一起，用于发生分片的情况，片偏移的单位为8字节。</p>
</li>
</ul>
<p><img src="https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/23ba890e-e11c-45e2-a20c-64d217f83430.png" alt=""></p>
<h1 id="数据链路层">数据链路层</h1>
<p>链路层的作用是将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/29a14735-e154-4f60-9a04-c9628e5d09f4.png" alt=""></p>
<h4 id="透明传输">透明传输</h4>
<p>透明表示一个实际存在的事物看起来好像不存在一样。</p>
<p>帧使用首部和尾部进行界定，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/e738a3d2-f42e-4755-ae13-ca23497e7a97.png" alt=""></p>
<h4 id="差错检测">差错检测</h4>
<p>目前数据链路层广泛使用了循环冗余（CRC）来检查比特差错。</p>
<h3 id="信道分类">信道分类</h3>
<ul>
<li>
<ol>
<li>广播信道</li>
</ol>
</li>
</ul>
<p>一对多通信，一个节点发送的数据能够被广播信道上所有的节点接收到。</p>
<p>所有节点都在同一广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突，主要有两种控制方法进行协调，一是使用信道复用技术，一是使用CSMA/CD协议。</p>
<ul>
<li>
<ol start="2">
<li>点对点信道</li>
</ol>
</li>
</ul>
<p>一对一通信
因此不会发生碰撞，也比较简单，使用PPP协议进行控制</p>
<h3 id="信道复用技术">信道复用技术</h3>
<ol>
<li>频分复用</li>
</ol>
<p>频分复用的所有主机在相同的时间占用不同的频率带宽资源。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/4aa5e057-bc57-4719-ab57-c6fbc861c505.png" alt=""></p>
<ol start="2">
<li>时分复用</li>
</ol>
<p>时分复用的所有主机在不同的时间占用相同的频率带宽资源</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/67582ade-d44a-46a6-8757-3c1296cc1ef9.png" alt=""></p>
<p>使用频分复用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源，但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其它用户使用，因此这两种方式对信道的利用率都不高。</p>
<ol start="3">
<li>统计时分复用</li>
</ol>
<p>是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。
<img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/6283be2a-814a-4a10-84bf-9592533fe6bc.png" alt=""></p>
<ol start="4">
<li>波分复用</li>
</ol>
<p>为每个用户分配m bit的码片，并且所有的码片正交，对于任意两个码片S和T 有</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/308a02e9-3346-4251-8c41-bd5536dab491.png" alt=""></p>
<p>为了讨论方便，取 m=8，设码片 为 00011011。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。</p>
<p>在计算时将 00011011 记作 (-1 -1 -1 +1 +1 -1 +1 +1)，可以得到</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/6fda1dc7-5c74-49c1-bb79-237a77e43a43.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/e325a903-f0b1-4fbd-82bf-88913dc2f290.png" alt=""></p>
<pre><code>其中S`为S的反码。
</code></pre>
<p>利用上面的式子我们知道，当接收端使用码片S对接收到的数据进行内积运算时，结果为0的是其它用户发送的数据，结果为一的是用户发送的比特1，结果为-1的是用户发送的比特0。</p>
<p>码分复用需要发送的数据量为原先的m倍。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/99b6060e-099d-4201-8e86-f8ab3768a7cf.png" alt=""></p>
<h3 id="csmacd协议">CSMA/CD协议</h3>
<p>CSMA/CD表示载波监听多点接入、碰撞检测</p>
<ul>
<li>
<p>**多点接入 ：**说明这是总线型网络，许多主机以多点的方式连接到总线上。</p>
</li>
<li>
<p>**载波监听 ：**每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。</p>
</li>
<li>
<p>**碰撞检测 ：**在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</p>
</li>
</ul>
<p>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 争用期 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p>
<p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用<strong>截断二进制指数退避算法</strong>来确定。从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/19d423e9-74f7-4c2b-9b97-55890e0d5193.png" alt=""></p>
<h3 id="ppp协议">PPP协议</h3>
<p>互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/e1ab9f28-cb15-4178-84b2-98aad87f9bc8.jpg" alt=""></p>
<p>PPP的帧格式</p>
<ul>
<li>F字段为帧的字界符</li>
<li>A和C字段暂时没有意义</li>
<li>FCS字段是使用CRC的检验序列</li>
<li>信息部分的长度不超过1500</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/759013d7-61d8-4509-897a-d75af598a236.png" alt=""></p>
<h3 id="mac地址">MAC地址</h3>
<p>MAC地址是链路层地址，长度是6字节（48位），用于唯一标识网络适配器（网卡）</p>
<p>一台主机拥有多少个网络适配器就有多少个MAC地址，例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。</p>
<h3 id="局域网">局域网</h3>
<p>局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。</p>
<p>主要有以太网、令牌环网、FDDI和ATM等局域网技术，目前以太网占领着有限局域网市场。</p>
<p>可以按照网络括扑结构对局域网进行分类：</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/807f4258-dba8-4c54-9c3c-a707c7ccffa2.jpg" alt=""></p>
<p>以太网</p>
<p>以太网是一种星型括扑结构局域网</p>
<p>早期使用集线器进行连接，集线器是一种物理设备，作用于比特而不是帧，当一个比特到达接口时，集线器重新生成这个比特，并将其能量强度放大，从而扩大网络的传输距离，之后再将这个比特发送到其它所有接口。如果集线器同时收到两个不同接口的帧，那么就发生了碰撞。</p>
<p>目前以太网使用交换机替代了集线器，交换机是一种链路层设备，它不会发生碰撞，能根据 MAC 地址进行存储转发。</p>
<p>以太网帧格式：</p>
<ul>
<li>**类型 ：**标记上层使用的协议；</li>
<li>**数据 ：**长度在 46-1500 之间，如果太小则需要填充；</li>
<li>**FCS ：**帧检验序列，使用的是 CRC 检验方法；</li>
</ul>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/164944d3-bbd2-4bb2-924b-e62199c51b90.png" alt=""></p>
<h3 id="交换机">交换机</h3>
<p>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。</p>
<p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p>
<p>下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧，主机 B 回应该帧向主机 A 发送数据包时，交换机查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 2 的映射。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/a4444545-0d68-4015-9a3d-19209dc436b3.png" alt=""></p>
<h3 id="虚拟局域网">虚拟局域网</h3>
<p>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一虚拟局域网中的成员才会收到链路层广播信息。</p>
<p>例如下图中（A1,A2,A3,A4）属于一个虚拟局域网，A1发送的广播会被A2、A3、A4收到，而其他站点收不到。</p>
<p>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/e98e9d20-206b-4533-bacf-3448d0096f38.png" alt=""></p>
<h1 id="物理层">物理层</h1>
<h4 id="根据信息在传输线上的传送方向分为以下三种通信方式">根据信息在传输线上的传送方向，分为以下三种通信方式：</h4>
<ul>
<li>
<p>**单工通信:**单向传输</p>
</li>
<li>
<p>**半双工通信:**双向交替通信</p>
</li>
<li>
<p>**全双工通信:**双向同时传输</p>
</li>
</ul>
<h3 id="带通调制">带通调制</h3>
<p>模拟信号是连续的信号，数字信号是离散的信号。带通调制把数字信号转换为模拟信号。</p>
<p><img src="https://raw.githubusercontent.com/CyC2018/CS-Notes/master/notes/pics/c34f4503-f62c-4043-9dc6-3e03288657df.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS_AutoreleasePool相关]]></title>
        <id>https://git-hushuai.github.io/post/ios-about-autoreleasepool</id>
        <link href="https://git-hushuai.github.io/post/ios-about-autoreleasepool">
        </link>
        <updated>2019-06-11T09:52:32.000Z</updated>
        <content type="html"><![CDATA[<h4 id="autoreleasepool">AutoreleasePool</h4>
<blockquote>
<p>新建一个XCode项目，将项目调整成MRC,Target -&gt; Build Sttings -&gt; All -&gt; 搜索‘automatic’ -&gt; 把 Objective-C Automatic Reference Counting 设置为 NO</p>
</blockquote>
<p>在MRC中，需要使用retain、release、autorelease手动管理内存，如下代码：</p>
<pre><code>int main(int argc, const char * argv[]) {
	@autoreleasepool {
	NSLog(@&quot;****A***&quot;);
	Person *p = [[Person alloc]init];
	[p release];
	NSLog(@&quot;***B***&quot;);
	}
	NSLog(@&quot;***C***&quot;);
	return 0;
}
</code></pre>
<p>打印结果：</p>
<p><img src="https://raw.githubusercontent.com/SunshineBrother/JHBlog/master/iOS%E7%9F%A5%E8%AF%86%E7%82%B9/iOS%E5%BA%95%E5%B1%82/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/AutoreleasePool.png" alt=""></p>
<p>如果使用autorelease，就需要用到自动缓存池，代码如下：</p>
<pre><code>int main(int argc, const char * argv[]) {
	@autoreleasepool {
	NSLog(@&quot;****A***&quot;);
	Person *p = [[[Person alloc]init] autorelease];
	NSLog(@&quot;***B***&quot;);
	}
	NSLog(@&quot;***C***&quot;);
	return 0;
}
</code></pre>
<p><strong>AutoreleasePool具体做了什么呢？ 我们首先查看</strong>AutoreleasePool的实现原理
 
 通过:</p>
<pre><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m 命令将 main.m 转成 C++ 代码
</code></pre>
<p>我们可以找到AutoreleasePool的实现：</p>
<pre><code>int main(int argc, const char * argv[]) 
{

/* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; 

		Person *p = ((Person *(*)(id, SEL))(void *)objc_msgSend)((id)((Person *(*)(id, SEL))(void *)objc_msgSend)((id)((Person *(*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;Person&quot;), sel_registerName(&quot;alloc&quot;)), sel_registerName(&quot;init&quot;)), sel_registerName(&quot;autorelease&quot;));
	}
	return 0;
}
</code></pre>
<p>会发现@autoreleasepool会被转成：<strong>__AtAutoreleasePool __autoreleasepool;</strong></p>
<p>而**__AtAutoreleasePool**我们全局查看发现它是一个结构体：</p>
<pre><code>struct __AtAutoreleasePool {
	__AtAutoreleasePool() {atautoreleasepoolobj = objc_autoreleasePoolPush();}
	
	~__AtAutoreleasePool() {objc_autoreleasePoolPop(atautoreleasepoolobj);}
	void * atautoreleasepoolobj;
};
</code></pre>
<p>下面这段代码构造函数，在创建结构体的时候调用：</p>
<pre><code>__AtAutoreleasePool() { // 构造函数，在创建结构体的时候调用
	atautoreleasepoolobj = objc_autoreleasePoolPush();
}
</code></pre>
<p>下面这段代码析构函数，在结构体销毁的时候调用：</p>
<pre><code>~__AtAutoreleasePool() { // 析构函数，在结构体销毁的时候调用
	objc_autoreleasePoolPop(atautoreleasepoolobj);
}

</code></pre>
<pre><code>@autoreleasepool {
	Person *p = [[[Person alloc]init] autorelease];
}
</code></pre>
<p>上面这段代码其实就是这个样子</p>
<pre><code>atautoreleasepoolobj = objc_autoreleasePoolPush();
Person *person = [[[Person alloc] init] autorelease];
objc_autoreleasePoolPop(atautoreleasepoolobj);
</code></pre>
<p><strong>AutoreleasePoolPage</strong></p>
<p>对于objc_autoreleasePoolPush和objc_autoreleasePoolPop 的实现我们可以在runtime源码NSObject.mm中查找相关实现</p>
<pre><code>void *objc_autoreleasePoolPush(void)
{
	return AutoreleasePoolPage::push();
}
void objc_autoreleasePoolPop(void *ctxt)
{
	AutoreleasePoolPage::pop(ctxt);
}
</code></pre>
<p>我们可以发现：push()函数和pop(ctxt)函数都是有AutoreleasePoolPage类来调用的。</p>
<p>对于AutoreleasePoolPage类，我们查看成员变量:</p>
<pre><code>// 查看NSObject.mm 文件可以看到关于AutoreleasePoolPage的类定义
class AutoreleasePoolPage 
{
#  define POOL_BOUNDARY nil (哨兵对象)
	magic_t const magic;//用于对当前AutoreleasePoolPage完整性校验
	id *next;//栈顶地址
	pthread_t const thread;//所在的线程
	AutoreleasePoolPage * const parent;// 父结点
	AutoreleasePoolPage *child;// 子节点
	uint32_t const depth; // 深度 
	uint32_t hiwat;
	// ...
}
</code></pre>
<ul>
<li>
<p>1、 每个AutoreleasePoolPage对象占用4096字节内存，除了用来存放它内部的成员变量，剩下的空间用来存放autorelease对象的地址</p>
</li>
<li>
<p>2、 所有的AutoreleasePoolPage对象通过双向链表的形式连接在一起</p>
</li>
<li>
<p>3、 调用push方法会将一个POOL_BOUNDARY入栈，并且返回其存放的内存地址</p>
</li>
<li>
<p>4、调用pop方法时传入一个POOL_BOUNDARY的内存地址，会从最后一个入栈的对象开始发送release消息，直到遇到这个POOL_BOUNDARY</p>
</li>
<li>
<p>5、id *next指向了下一个能存放autorelease对象地址的区域</p>
</li>
<li>
<p>6、AutoreleasePoolPage 空间被占满时，会以链表的形式新建链接一个 AutoreleasePoolPage 对象，然后将新的autorelease对象的地址存在child指针</p>
</li>
</ul>
<h4 id="push函数实现">push()函数实现</h4>
<pre><code>static inline void *push() 
{
	id *dest;
	if (DebugPoolAllocation) {
	// Each autorelease pool starts on a new pool page.
	dest = autoreleaseNewPage(POOL_BOUNDARY);
	} else {
	dest = autoreleaseFast(POOL_BOUNDARY);
	}
	assert(dest == EMPTY_POOL_PLACEHOLDER || *dest == POOL_BOUNDARY);
	return dest;
}

1、 在DebugPoolAllocation线程池满了以后，会调用
autoreleaseNewPage(POOL_BOUNDARY)来创建一个新的线程池。

2、线程池没有满的时候调用autoreleaseFast函数，以栈的形式压入线程池
中。

</code></pre>
<pre><code>static inline id *autoreleaseFast(id obj)
{
	AutoreleasePoolPage *page = hotPage(); // hotPage 可以理
	解为当前正在使用的 AutoreleasePoolPage。
	if (page &amp;&amp; !page-&gt;full()) {
		return page-&gt;add(obj);
	} else if (page) {
		return autoreleaseFullPage(obj, page);
	} else {
		return autoreleaseNoPage(obj);
	}
}

1、有 hotPage 并且当前 page 不满，调用 page-&gt;add(obj) 方法将对象添加至AutoreleasePoolPage 的栈中
 
2、有 hotPage 并且当前 page 已满，调用 autoreleaseFullPage 初始
化一个新的页，调用 page-&gt;add(obj) 方法将对象添加AutoreleasePoolPage 的栈中

3、无 hotPage，调用 autoreleaseNoPage 创建一个 hotPage，调用
 page-&gt;add(obj) 方法将对象添加至 AutoreleasePoolPage 的栈中

</code></pre>
<h4 id="pop函数">pop函数（）</h4>
<pre><code>// 简化后
static inline void pop(void *token) 
{   
	AutoreleasePoolPage *page;
	id *stop;
	page = pageForPointer(token);
	stop = (id *)token;
// 1.根据 token，也就是上文的占位 POOL_BOUNDARY 释放 `autoreleased` 对象
	page-&gt;releaseUntil(stop);

// hysteresis: keep one empty child if page is more than half full
// 2.释放 `Autoreleased` 对象后，销毁多余的 page。
	if (page-&gt;lessThanHalfFull()) {
	page-&gt;child-&gt;kill();
	}else if (page-&gt;child-&gt;child) {
	page-&gt;child-&gt;child-&gt;kill();
	}
}
</code></pre>
<h4 id="来到releaseuntil内部">来到releaseUntil(...)内部：</h4>
<pre><code>// 简化后
void releaseUntil(id *stop) 
{
	// 1.
	while (this-&gt;next != stop) {
		AutoreleasePoolPage *page = hotPage();
		// 2.
		while (page-&gt;empty()) {
		page = page-&gt;parent;
		setHotPage(page);
		}
		// 3.
		if (obj != POOL_BOUNDARY) {
		objc_release(obj);
		}
	}
	// 4.
	setHotPage(this);
}

</code></pre>
<ul>
<li>
<p>外部循环挨个遍历 autoreleased 对象，直到遍历到stop这个POOL_BOUNDARY 。</p>
</li>
<li>
<p>如果当前 hatPage 没有 POOL_BOUNDARY，将 hatPage 设置为父节点。</p>
</li>
<li>
<p>给当前 autoreleased 对象发送release消息。</p>
</li>
<li>
<p>再次配置 hatPage。</p>
</li>
</ul>
<h4 id="autoreleasepool对象什么时候释放">AutoreleasePool对象什么时候释放：</h4>
<pre><code>RunLoop的状态枚举：

typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {
	kCFRunLoopEntry = (1UL &lt;&lt; 0),              // 1
	kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),       // 2
	kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),      // 4
	kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),      // 32
	kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),       // 64
	kCFRunLoopExit = (1UL &lt;&lt; 7),               // 128
	kCFRunLoopAllActivities = 0x0FFFFFFFU
};

+ 0x1 （等于1）对应的是kCFRunLoopEntry，第一个 Observer 监视的即将进入Loop时，其回调内会调
用 _objc_autoreleasePoolPush() 创建一个自动释放池。其 order 是 -2147483647，优先级最高
保证创建缓存池发生在其他所有回调之前。

+ 0xa0（16进制等于160，等于32+128） 对应的是 kCFRunLoopBeforeWaiting&amp;kCFRunLoopExit
第二个 Observer 监视了两个事件： 准备进入休眠时调用 _objc_autoreleasePoolPop() 和 
_objc_autoreleasePoolPush() 释放旧的池并创建新池；即将退出Loop时调用
_objc_autoreleasePoolPop()来释放自动释放池。这个 Observer 的 order 是 2147483647，优先
级最低，保证其释放缓存池发生在其他所有回调之后。

</code></pre>
<h4 id="具体步骤">具体步骤</h4>
<ul>
<li>
<p>iOS在主线程的Runloop中注册了2个Observer</p>
</li>
<li>
<p>第1个Observer监听了kCFRunLoopEntry事件，会调用objc_autoreleasePoolPush()</p>
</li>
<li>
<p>第2个Observer监听了kCFRunLoopBeforeWaiting事件，会调用objc_autoreleasePoolPop()、objc_autoreleasePoolPush() 监听了kCFRunLoopBeforeExit事件，会调用objc_autoreleasePoolPop()</p>
</li>
</ul>
<p style="font-size:28px;color:#f51c26">autoreleasepool 对象是在 runloop 的即将进入休眠时和线程即将退出时会调用autoreleasepool的pop方法进行释放。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS-Runtime运行时基本函数]]></title>
        <id>https://git-hushuai.github.io/post/ios-about-runtime</id>
        <link href="https://git-hushuai.github.io/post/ios-about-runtime">
        </link>
        <updated>2019-06-11T07:33:08.000Z</updated>
        <content type="html"><![CDATA[<p style="color:#ee464d;font-size:18px;">1、运行时动态创建类</p>
<pre><code>- (Class)makeSubclassWithClass:(Class)origClass {
    NSString *className = NSStringFromClass(origClass);
    NSString *aopClassName = [kAOPFeedsViewPrefix stringByAppendingString:className];
    Class aopClass = NSClassFromString(aopClassName);

    if (aopClass) {
        return aopClass;
    }
    aopClass = objc_allocateClassPair(origClass, aopClassName.UTF8String, 0);
	
	// 添加方法、或者变量，在objc_registerClassPair之前
    [self setupAopClass:aopClass];

    objc_registerClassPair(aopClass);
    return aopClass;
}
</code></pre>
<p style="color:#ee464d;font-size:18px;">2、交换两个方法的实现</p>
<pre><code>BOOL imyaop_swizzleMethod(Class clazz, SEL origSel_, SEL altSel_) {
    if (!clazz) {
        return NO;
    }
    Method origMethod = class_getInstanceMethod(clazz, origSel_);
    if (!origMethod) {
        return NO;
    }
    Method altMethod = class_getInstanceMethod(clazz, altSel_);
    if (!altMethod) {
        return NO;
    }

    class_addMethod(clazz,
                    origSel_,
                    class_getMethodImplementation(clazz, origSel_),
                    method_getTypeEncoding(origMethod));
    class_addMethod(clazz,
                    altSel_,
                    class_getMethodImplementation(clazz, altSel_),
                    method_getTypeEncoding(altMethod));

    method_exchangeImplementations(class_getInstanceMethod(clazz, origSel_), class_getInstanceMethod(clazz, altSel_));

    return YES;
}
</code></pre>
<p style="color:#ee464d;font-size:18px;">3、动态关联对象</p>
<pre><code>static const void *kIMYAOPTableUtilsKey = &amp;kIMYAOPTableUtilsKey;

- (IMYAOPTableViewUtils *)aop_utils {
    IMYAOPTableViewUtils *aopUtils = objc_getAssociatedObject(self, kIMYAOPTableUtilsKey);
    if (!aopUtils) {
        @synchronized(self) {
            aopUtils = objc_getAssociatedObject(self, kIMYAOPTableUtilsKey);
            if (!aopUtils) {
                objc_setAssociatedObject(self, kIMYAOPTableUtilsKey, aopUtils, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
            }
        }
    }
    return aopUtils;
}
</code></pre>
<p style="color:#ee464d;font-size:18px;">4、通过消息转发调用父类的方法</p>
<pre><code>((void (*)(void *, SEL, id))(void *)objc_msgSendSuper)(&amp;objcSuper,
 @selector(setDelegate:), self);
</code></pre>
<p style="color:#ee464d;font-size:18px;">5、动态给一个类添加实例、类方法</p>
<pre><code>- (void)addOverriteMethod:(SEL)seletor toMethod:(SEL)toSeletor aopClass:(Class)aopClass {
    // 指定函数实现的类
    Class implClass = [self implAopViewClass];
    Method method = class_getInstanceMethod(implClass, toSeletor);
    if (method == NULL) {
        method = class_getInstanceMethod(implClass, seletor);
    }
    const char *types = method_getTypeEncoding(method);
    IMP imp = method_getImplementation(method);
    class_addMethod(aopClass, seletor, imp, types); // 类方法挂载在metaclass对象
}
</code></pre>
<p style="color:#ee464d;font-size:18px;">6、改变方法的实现</p>
<pre><code> * @param m The method for which to set an implementation.
 * @param imp The implemention to set to this method.
 method_setImplementation(&lt;#Method  _Nonnull m#&gt;, &lt;#IMP  _Nonnull imp#&gt;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS关于weak的实现原理]]></title>
        <id>https://git-hushuai.github.io/post/ios-about-weak</id>
        <link href="https://git-hushuai.github.io/post/ios-about-weak">
        </link>
        <updated>2019-06-11T07:12:30.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h4 id="weak表结构">weak表结构</h4>
<blockquote>
<p>weak_table_t是一个全局weak引用的表，使用对象的地址作为key，用weak_entry_t类型结构体对象作为value。</p>
</blockquote>
<pre><code>objc-weak.h 文件关于weak_table_t结构体定义
/**
 * The global weak references table. Stores object ids as keys,
 * and weak_entry_t structs as their values.
 */
struct weak_table_t {
    weak_entry_t *weak_entries;// 保留了所有指向对象的weak指针
    size_t    num_entries;// weak对象的存储空间
    uintptr_t mask;// 
    uintptr_t max_hash_displacement;
};
</code></pre>
<blockquote>
<p>weak_entry_t 是存储在弱引用表中的一个内部结构体，它负责维护和存储指向一个对象的所有弱引用hash表，其定义如下：</p>
</blockquote>
<pre><code>struct weak_entry_t {
    DisguisedPtr&lt;objc_object&gt; referent;
    union {
        struct {
            weak_referrer_t *referrers;
            uintptr_t        out_of_line_ness : 2;
            uintptr_t        num_refs : PTR_MINUS_2;
            uintptr_t        mask;
            uintptr_t        max_hash_displacement;
        };
        struct {
            // out_of_line_ness field is low bits of inline_referrers[1]
            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];
        };
    };

    bool out_of_line() {
        return (out_of_line_ness == REFERRERS_OUT_OF_LINE);
    }

    weak_entry_t&amp; operator=(const weak_entry_t&amp; other) {
        memcpy(this, &amp;other, sizeof(other));
        return *this;
    }

    weak_entry_t(objc_object *newReferent, objc_object **newReferrer)
        : referent(newReferent)
    {
        inline_referrers[0] = newReferrer;
        for (int i = 1; i &lt; WEAK_INLINE_COUNT; i++) {
            inline_referrers[i] = nil;
        }
    }
};
</code></pre>
<blockquote>
<p>在weak_entry_t 结构体中，DisguisedPtr referent 是对泛型对象的指针做了一层封装，通过这个泛型类来解决内存泄露的问题，
objc_object 是weak_entry_t表中weak弱引用对象的范型对象的结构体。</p>
</blockquote>
<pre><code>struct objc_object {
private:
    isa_t isa;

public:

    // ISA() assumes this is NOT a tagged pointer object
    Class ISA();

    // getIsa() allows this to be a tagged pointer object
    Class getIsa();

    // initIsa() should be used to init the isa of new objects only.
    // If this object already has an isa, use changeIsa() for correctness.
    // initInstanceIsa(): objects with no custom RR/AWZ
    // initClassIsa(): class objects
    // initProtocolIsa(): protocol objects
    // initIsa(): other objects
    void initIsa(Class cls /*nonpointer=false*/);
    void initClassIsa(Class cls /*nonpointer=maybe*/);
    void initProtocolIsa(Class cls /*nonpointer=maybe*/);
    void initInstanceIsa(Class cls, bool hasCxxDtor);

    // changeIsa() should be used to change the isa of existing objects.
    // If this is a new object, use initIsa() for performance.
    Class changeIsa(Class newCls);

    bool hasNonpointerIsa();
    bool isTaggedPointer();
    bool isBasicTaggedPointer();
    bool isExtTaggedPointer();
    bool isClass();

    // object may have associated objects?
    bool hasAssociatedObjects();
    void setHasAssociatedObjects();

    // object may be weakly referenced?
    bool isWeaklyReferenced();
    void setWeaklyReferenced_nolock();

    // object may have -.cxx_destruct implementation?
    bool hasCxxDtor();

    // Optimized calls to retain/release methods
    id retain();
    void release();
    id autorelease();

    // Implementations of retain/release methods
    id rootRetain();
    bool rootRelease();
    id rootAutorelease();
    bool rootTryRetain();
    bool rootReleaseShouldDealloc();
    uintptr_t rootRetainCount();

    // Implementation of dealloc methods
    bool rootIsDeallocating();
    void clearDeallocating();
    void rootDealloc();

private:
    void initIsa(Class newCls, bool nonpointer, bool hasCxxDtor);

    // Slow paths for inline control
    id rootAutorelease2();
    bool overrelease_error();

#if SUPPORT_NONPOINTER_ISA
    // Unified retain count manipulation for nonpointer isa
    id rootRetain(bool tryRetain, bool handleOverflow);
    bool rootRelease(bool performDealloc, bool handleUnderflow);
    id rootRetain_overflow(bool tryRetain);
    bool rootRelease_underflow(bool performDealloc);

    void clearDeallocating_slow();

    // Side table retain count overflow for nonpointer isa
    void sidetable_lock();
    void sidetable_unlock();

    void sidetable_moveExtraRC_nolock(size_t extra_rc, bool isDeallocating, bool weaklyReferenced);
    bool sidetable_addExtraRC_nolock(size_t delta_rc);
    size_t sidetable_subExtraRC_nolock(size_t delta_rc);
    size_t sidetable_getExtraRC_nolock();
#endif

    // Side-table-only retain count
    bool sidetable_isDeallocating();
    void sidetable_clearDeallocating();

    bool sidetable_isWeaklyReferenced();
    void sidetable_setWeaklyReferenced_nolock();

    id sidetable_retain();
    id sidetable_retain_slow(SideTable&amp; table);

    uintptr_t sidetable_release(bool performDealloc = true);
    uintptr_t sidetable_release_slow(SideTable&amp; table, bool performDealloc = true);

    bool sidetable_tryRetain();

    uintptr_t sidetable_retainCount();
#if DEBUG
    bool sidetable_present();
#endif
};
</code></pre>
<h4 id="weak的底层实现原理">weak的底层实现原理</h4>
<p>在runtime源码中的NSObject.mm 文件中找到了关于初始化和管理weak表的方法。</p>
<pre><code> 1 初始化时：runtime会调用objc_initWeak函数，初始化一个新的weak指针指向对象的地址。 
 
 2 添加引用时：objc_initWeak函数会调用 storeWeak() 函数， storeWeak() 的作用是更新指针指
 向，创建对应的弱引用表。 
 
 3 释放时,调用clearDeallocating函数。clearDeallocating函数首先根据对象地址获取所有weak指
 针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象
 的记录。 
</code></pre>
<ol>
<li>初始化</li>
</ol>
<pre><code>/** 
 * Initialize a fresh weak pointer to some object location. 
 * It would be used for code like: 
 *
 * (The nil case) 
 * __weak id weakPtr;
 * (The non-nil case) 
 * NSObject *o = ...;
 * __weak id weakPtr = o;
 * 
 * This function IS NOT thread-safe with respect to concurrent 
 * modifications to the weak variable. (Concurrent weak clear is safe.)
 *
 * @param location Address of __weak ptr. 
 * @param newObj Object ptr. 
 */
id objc_initWeak(id *location, id newObj)
{
    if (!newObj) {
        *location = nil; // newObj 为空时直接把指针释放掉
        return nil;
    }

    return storeWeak&lt;DontHaveOld, DoHaveNew, DoCrashIfDeallocating&gt;
        (location, (objc_object*)newObj); // 存储weak对象
}

</code></pre>
<ol start="2">
<li>更新指针指向，创建对应的弱引用表</li>
</ol>
<p>我们storeWeak表面意思是weak商店，其实weak应该是在storeWeak函数里面进行了进一步的处理，</p>
<pre><code>	
//我们看传参
//1、location地址
//2、newObj新的对象
template &lt;HaveOld haveOld, HaveNew haveNew,
          CrashIfDeallocating crashIfDeallocating&gt;
static id storeWeak(id *location, objc_object *newObj)
{

	assert(haveOld  ||  haveNew);
	if (!haveNew) assert(newObj == nil);
	// 该过程用来更新弱引用指针的指向
	// 初始化 previouslyInitializedClass 指针
	Class previouslyInitializedClass = nil;
	id oldObj;
	
	//声明新旧两个SideTable散列表
	SideTable *oldTable;
	SideTable *newTable;
	// 获得新值和旧值得锁存位置（用地址作为唯一标示）
	// 通过地址来建立索引标志，防止重复
	// 下面
	 
retry:
	if (haveOld) {
		// 更改指针，获得以 oldObj 为索引所存储的值地址
		oldObj = *location;
		oldTable = &amp;SideTables()[oldObj];
	} else {
		oldTable = nil;
	}
	if (haveNew) {
		// 更改新值指针，获得以 newObj 为索引做hash运算得到的SideTable
		newTable = &amp;SideTables()[newObj];
	} else {
		newTable = nil;
	}
	
	// 加锁操作，防止多线程中竞争冲突
	SideTable::lockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);
	// 避免线程冲突重处理
	// location 应该与 oldObj 保持一致，如果不同，说明当前的 location 已经处理过 oldObj 可是又被其他线程所修改
	if (haveOld  &amp;&amp;  *location != oldObj) {
		SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);
		goto retry;
	}
	// 防止弱引用间死锁
	// 并且通过 +initialize 初始化构造器保证弱引用的isa非空指向
	if (haveNew  &amp;&amp;  newObj) {
	   // 获得新对象的isa 指针
		Class cls = newObj-&gt;getIsa();
		// 判断isa 非空且已经初始化
		if (cls != previouslyInitializedClass  &amp;&amp;  
		!((objc_class *)cls)-&gt;isInitialized()) 
	{
		// 解锁
			SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);
		// 对其 isa 指针进行初始化
			_class_initialize(_class_getNonMetaClass(cls, (id)newObj));
		// 如果该类已经完成执行 +initialize 方法是最理想情况
		// 如果该类 +initialize 在线程中
		// 例如 +initialize 正在调用 storeWeak 方法
		// 需要手动对其增加保护策略，并设置 previouslyInitializedClass 指针进行标记
			previouslyInitializedClass = cls;
		
			goto retry;
		}
	}
	//  清除旧值
	if (haveOld) {
		weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);
	}
	
	//  分配新值 
	if (haveNew) {
		newObj = (objc_object *)
		weak_register_no_lock(&amp;newTable-&gt;weak_table, (id)newObj, location, 
		crashIfDeallocating);
	  // 如果弱引用被释放weak_register_no_lock 方法返回nil
	  // 在引用计数表中设置弱引用标记位
	if (newObj  &amp;&amp;  !newObj-&gt;isTaggedPointer()) {
	// 弱引用为初始化操作
	// 
		newObj-&gt;setWeaklyReferenced_nolock();
	}
		*location = (id)newObj;
	}else {
	 
	}
		SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);
		return (id)newObj;
	}
</code></pre>
<p>在NSObject.mm 文件中可以查看到SideTable结构体定义</p>
<pre><code>struct SideTable {
    spinlock_t slock; // 保证原子操作的自旋锁
    RefcountMap refcnts; // 引用计数的hash表
    weak_table_t weak_table; // weak引用全局hash表

    SideTable() {
        memset(&amp;weak_table, 0, sizeof(weak_table));
    }

    ~SideTable() {
        _objc_fatal(&quot;Do not delete SideTable.&quot;);
    }

    void lock() { slock.lock(); }
    void unlock() { slock.unlock(); }
    void forceReset() { slock.forceReset(); }

    // Address-ordered lock discipline for a pair of side tables.

    template&lt;HaveOld, HaveNew&gt;
    static void lockTwo(SideTable *lock1, SideTable *lock2);
    template&lt;HaveOld, HaveNew&gt;
    static void unlockTwo(SideTable *lock1, SideTable *lock2);
};
</code></pre>
<ul>
<li>
<p>通过上面的说明我们可以看到：系统通过一个全局的weak_table_t表，采用hash（哈希表）的方式存储所有的weak对象，使用不定类型对象的地址作为key，用weak_entry_t 类型结构体对象作为value。</p>
</li>
<li>
<p>weak_entry_t （weak_table_t表中hash表的value值，weak对象体）：负责维护和存储指向一个对象的所有弱引用hash表。</p>
</li>
<li>
<p>objc_object (weak_entry_t对象中的范型对象，用于标记weak对象)：标示weak引用的对象。</p>
</li>
</ul>
<h4 id="weak_register_no_lock-底层结构">weak_register_no_lock 底层结构</h4>
<pre><code>/** 
 * Registers a new (object, weak pointer) pair. Creates a new weak
 * object entry if it does not exist.
 * 
 * @param weak_table The global weak table.
 * @param referent The object pointed to by the weak reference.
 * @param referrer The weak pointer address.
 */
id 
weak_register_no_lock(weak_table_t *weak_table, id referent_id, 
                      id *referrer_id, bool crashIfDeallocating)
{
    objc_object *referent = (objc_object *)referent_id;
    objc_object **referrer = (objc_object **)referrer_id;

    if (!referent  ||  referent-&gt;isTaggedPointer()) return referent_id;

    // ensure that the referenced object is viable
    bool deallocating;
    if (!referent-&gt;ISA()-&gt;hasCustomRR()) {
        deallocating = referent-&gt;rootIsDeallocating();
    }
    else {
        BOOL (*allowsWeakReference)(objc_object *, SEL) = 
            (BOOL(*)(objc_object *, SEL))
            object_getMethodImplementation((id)referent, 
                                           SEL_allowsWeakReference);
        if ((IMP)allowsWeakReference == _objc_msgForward) {
            return nil;
        }
        deallocating =
            ! (*allowsWeakReference)(referent, SEL_allowsWeakReference);
    }

    if (deallocating) {
        if (crashIfDeallocating) {
            _objc_fatal(&quot;Cannot form weak reference to instance (%p) of &quot;
                        &quot;class %s. It is possible that this object was &quot;
                        &quot;over-released, or is in the process of deallocation.&quot;,
                        (void*)referent, object_getClassName((id)referent));
        } else {
            return nil;
        }
    }

    // now remember it and where it is being stored
    weak_entry_t *entry;
    if ((entry = weak_entry_for_referent(weak_table, referent))) {
        append_referrer(entry, referrer);
    } 
    else {
        weak_entry_t new_entry(referent, referrer);
        weak_grow_maybe(weak_table);
        weak_entry_insert(weak_table, &amp;new_entry);
    }

    // Do not set *referrer. objc_storeWeak() requires that the 
    // value not change.

    return referent_id;
}
</code></pre>
<h5 id="查看其中关键代码weak_entry_for_referent">查看其中关键代码weak_entry_for_referent:</h5>
<pre><code>/** 
 * Return the weak reference table entry for the given referent. 
 * If there is no entry for referent, return NULL. 
 * Performs a lookup.
 *
 * @param weak_table 
 * @param referent The object. Must not be nil.
 * 
 * @return The table of weak referrers to this object. 
 */
static weak_entry_t *
weak_entry_for_referent(weak_table_t *weak_table, objc_object *referent)
{
    assert(referent);

    weak_entry_t *weak_entries = weak_table-&gt;weak_entries;

    if (!weak_entries) return nil;

    size_t begin = hash_pointer(referent) &amp; weak_table-&gt;mask;
    size_t index = begin;
    size_t hash_displacement = 0;
    while (weak_table-&gt;weak_entries[index].referent != referent) {
        index = (index+1) &amp; weak_table-&gt;mask;
        if (index == begin) bad_weak_table(weak_table-&gt;weak_entries);
        hash_displacement++;
        if (hash_displacement &gt; weak_table-&gt;max_hash_displacement) {
            return nil;
        }
    }
    
    return &amp;weak_table-&gt;weak_entries[index];
}
</code></pre>
<blockquote>
<p>上面代码是找到weak_table-&gt;wak_entries，然后将引用计数对象的地址进行hash化后与weak_table-&gt;mask 做“与“操作，作为下标，在全局weak表中查找，若找到，返回这个对象的weak记录表，若没有，返回nil。</p>
<p>外面拿到这个weak_entry_t *entry,执行append_referer(entry,referer),把这个referer插入到entry里面。</p>
<p>如果返回的这个entry是空的话，就会创建一个新的entry，然后分配空间，最后把这个entry插入weak_table里面的weak_entries数组里面。</p>
</blockquote>
<ul>
<li>初始化弱引用对象流程一览</li>
</ul>
<p>弱引用的初始化，从上文的分析中可以看出，主要的操作部分就在弱引用表的取键、查询散列、创建弱引用表等操作，可以总结如下的流程：</p>
<p><img src="https://git-hushuai.github.io/post-images/1560239988159.png" alt=""></p>
<p>对weak进行存储的过程可以通过下边的流程图详细的描述出来：</p>
<p><img src="https://git-hushuai.github.io/post-images/1560240100561.png" alt=""></p>
<h4 id="weak释放为nil的过程">weak释放为nil的过程</h4>
<blockquote>
<p>weak 被释放为nil，整个对象的释放整体流程为：</p>
</blockquote>
<ul>
<li>1、 调用objc_relase</li>
<li>2、因为对象的引用计数为0，所以执行dealloc</li>
<li>3、在dealloc中，调用了_objc_rootDealloc函数。</li>
</ul>
<pre><code>// Replaced by NSZombies
- (void)dealloc {
    _objc_rootDealloc(self);
}
</code></pre>
<ul>
<li>4、在_objc_rootDealloc中，调用了object_dispose函数</li>
</ul>
<pre><code>// objc-runtime-new.mm 文件
/***********************************************************************
* object_dispose
* fixme
* Locking: none
**********************************************************************/
id 
object_dispose(id obj)
{
    if (!obj) return nil;

    objc_destructInstance(obj);    
    free(obj);

    return nil;
}
</code></pre>
<ul>
<li>5、调用objc_destructInstance</li>
</ul>
<pre><code>// objc-runtime-new.mm 文件
/***********************************************************************
* objc_destructInstance
* Destroys an instance without freeing memory. 
* Calls C++ destructors.
* Calls ARC ivar cleanup.
* Removes associative references.
* Returns `obj`. Does nothing if `obj` is nil.
**********************************************************************/
void *objc_destructInstance(id obj) 
{
    if (obj) {
        // Read all of the flags at once for performance.
        bool cxx = obj-&gt;hasCxxDtor();
        bool assoc = obj-&gt;hasAssociatedObjects();// 

        // This order is important.
        if (cxx) object_cxxDestruct(obj);
        if (assoc) _object_remove_assocations(obj);
        obj-&gt;clearDeallocating();
    }

    return obj;
}
</code></pre>
<ul>
<li>6、调用clearDeallocating。</li>
</ul>
<pre><code>// NSObject.mm 文件
inline void 
objc_object::clearDeallocating()
{
    if (slowpath(!isa.nonpointer)) {
        // Slow path for raw pointer isa.
        sidetable_clearDeallocating();
    }
    else if (slowpath(isa.weakly_referenced  ||  isa.has_sidetable_rc)) {
        // Slow path for non-pointer isa with weak refs and/or side table data.
        clearDeallocating_slow();
    }

    assert(!sidetable_present());
}
</code></pre>
<ul>
<li>7、调用sidetable_clearDeallocating函数</li>
</ul>
<pre><code>// NSObject.mm 文件
void 
objc_object::sidetable_clearDeallocating()
{
    SideTable&amp; table = SideTables()[this];

    // clear any weak table items
    // clear extra retain count and deallocating bit
    // (fixme warn or abort if extra retain count == 0 ?)
    table.lock();
    RefcountMap::iterator it = table.refcnts.find(this);
    if (it != table.refcnts.end()) {
        if (it-&gt;second &amp; SIDE_TABLE_WEAKLY_REFERENCED) {
            weak_clear_no_lock(&amp;table.weak_table, (id)this);
        }
        table.refcnts.erase(it);
    }
    table.unlock();
}
</code></pre>
<ul>
<li>8、调用</li>
</ul>
<pre><code>// NSObject.mm 文件
// Slow path of clearDeallocating() 
// for objects with nonpointer isa
// that were ever weakly referenced 
// or whose retain count ever overflowed to the side table.
NEVER_INLINE void
objc_object::clearDeallocating_slow()
{
    assert(isa.nonpointer  &amp;&amp;  (isa.weakly_referenced || isa.has_sidetable_rc));

    SideTable&amp; table = SideTables()[this];
    table.lock();
    if (isa.weakly_referenced) {
        weak_clear_no_lock(&amp;table.weak_table, (id)this);
    }
    if (isa.has_sidetable_rc) {
        table.refcnts.erase(this);
    }
    table.unlock();
}
</code></pre>
<p>对weak置为nil的操作最终调用执行weak_clear_no_lock方法用于执行置为nil的操作，实现如下</p>
<pre><code>// objc-weak.mm 文件
/** 
 * Called by dealloc; nils out all weak pointers that point to the 
 * provided object so that they can no longer be used.
 * 
 * @param weak_table 
 * @param referent The object being deallocated. 
 */
void 
weak_clear_no_lock(weak_table_t *weak_table, id referent_id) 
{
    objc_object *referent = (objc_object *)referent_id;

    weak_entry_t *entry = weak_entry_for_referent(weak_table, referent);
    if (entry == nil) {
        /// XXX shouldn't happen, but does with mismatched CF/objc
        //printf(&quot;XXX no entry for clear deallocating %p\n&quot;, referent);
        return;
    }

    // zero out references
    weak_referrer_t *referrers;
    size_t count;
    
    if (entry-&gt;out_of_line()) {
        referrers = entry-&gt;referrers;
        count = TABLE_SIZE(entry);
    } 
    else {
        referrers = entry-&gt;inline_referrers;
        count = WEAK_INLINE_COUNT;
    }
    
    for (size_t i = 0; i &lt; count; ++i) {
        objc_object **referrer = referrers[i];
        if (referrer) {
            if (*referrer == referent) {
                *referrer = nil;
            }
            else if (*referrer) {
                _objc_inform(&quot;__weak variable at %p holds %p instead of %p. &quot;
                             &quot;This is probably incorrect use of &quot;
                             &quot;objc_storeWeak() and objc_loadWeak(). &quot;
                             &quot;Break on objc_weak_error to debug.\n&quot;, 
                             referrer, (void*)*referrer, (void*)referent);
                objc_weak_error();
            }
        }
    }
    
    weak_entry_remove(weak_table, entry);
}
</code></pre>
<p>objc_clear_deallocating 该函数的动作如下：</p>
<ul>
<li>1、 从weak表中获取废弃对象的地址为键值得记录。</li>
<li>2、将包含在记录中的所有附有weak修饰符变量的地址，赋值为nil。</li>
<li>3、将weak表中该记录删除。</li>
<li>4、从引用计数中删除废弃对象的地址为键值得记录。</li>
</ul>
]]></content>
    </entry>
</feed>