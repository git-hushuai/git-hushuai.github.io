<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://git-hushuai.github.io</id>
    <title>shuaike</title>
    <updated>2019-06-11T08:01:45.777Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://git-hushuai.github.io"/>
    <link rel="self" href="https://git-hushuai.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://git-hushuai.github.io/images/avatar.png</logo>
    <icon>https://git-hushuai.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, shuaike</rights>
    <entry>
        <title type="html"><![CDATA[iOS-Runtime运行时基本函数]]></title>
        <id>https://git-hushuai.github.io/post/ios-about-runtime</id>
        <link href="https://git-hushuai.github.io/post/ios-about-runtime">
        </link>
        <updated>2019-06-11T07:33:08.000Z</updated>
        <content type="html"><![CDATA[<p style="color:#ee464d;font-size:18px;">1、运行时动态创建类</p>
<pre><code>- (Class)makeSubclassWithClass:(Class)origClass {
    NSString *className = NSStringFromClass(origClass);
    NSString *aopClassName = [kAOPFeedsViewPrefix stringByAppendingString:className];
    Class aopClass = NSClassFromString(aopClassName);

    if (aopClass) {
        return aopClass;
    }
    aopClass = objc_allocateClassPair(origClass, aopClassName.UTF8String, 0);
	
	// 添加方法、或者变量，在objc_registerClassPair之前
    [self setupAopClass:aopClass];

    objc_registerClassPair(aopClass);
    return aopClass;
}
</code></pre>
<p style="color:#ee464d;font-size:18px;">2、交换两个方法的实现</p>
<pre><code>BOOL imyaop_swizzleMethod(Class clazz, SEL origSel_, SEL altSel_) {
    if (!clazz) {
        return NO;
    }
    Method origMethod = class_getInstanceMethod(clazz, origSel_);
    if (!origMethod) {
        return NO;
    }
    Method altMethod = class_getInstanceMethod(clazz, altSel_);
    if (!altMethod) {
        return NO;
    }

    class_addMethod(clazz,
                    origSel_,
                    class_getMethodImplementation(clazz, origSel_),
                    method_getTypeEncoding(origMethod));
    class_addMethod(clazz,
                    altSel_,
                    class_getMethodImplementation(clazz, altSel_),
                    method_getTypeEncoding(altMethod));

    method_exchangeImplementations(class_getInstanceMethod(clazz, origSel_), class_getInstanceMethod(clazz, altSel_));

    return YES;
}
</code></pre>
<p style="color:#ee464d;font-size:18px;">3、动态关联对象</p>
<pre><code>static const void *kIMYAOPTableUtilsKey = &amp;kIMYAOPTableUtilsKey;

- (IMYAOPTableViewUtils *)aop_utils {
    IMYAOPTableViewUtils *aopUtils = objc_getAssociatedObject(self, kIMYAOPTableUtilsKey);
    if (!aopUtils) {
        @synchronized(self) {
            aopUtils = objc_getAssociatedObject(self, kIMYAOPTableUtilsKey);
            if (!aopUtils) {
                objc_setAssociatedObject(self, kIMYAOPTableUtilsKey, aopUtils, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
            }
        }
    }
    return aopUtils;
}
</code></pre>
<p style="color:#ee464d;font-size:18px;">4、通过消息转发调用父类的方法</p>
<pre><code>((void (*)(void *, SEL, id))(void *)objc_msgSendSuper)(&amp;objcSuper,
 @selector(setDelegate:), self);
</code></pre>
<p style="color:#ee464d;font-size:18px;">5、动态给一个类添加实例、类方法</p>
<pre><code>- (void)addOverriteMethod:(SEL)seletor toMethod:(SEL)toSeletor aopClass:(Class)aopClass {
    // 指定函数实现的类
    Class implClass = [self implAopViewClass];
    Method method = class_getInstanceMethod(implClass, toSeletor);
    if (method == NULL) {
        method = class_getInstanceMethod(implClass, seletor);
    }
    const char *types = method_getTypeEncoding(method);
    IMP imp = method_getImplementation(method);
    class_addMethod(aopClass, seletor, imp, types); // 类方法挂载在metaclass对象
}
</code></pre>
<p style="color:#ee464d;font-size:18px;">6、改变方法的实现</p>
<pre><code> * @param m The method for which to set an implementation.
 * @param imp The implemention to set to this method.
 method_setImplementation(&lt;#Method  _Nonnull m#&gt;, &lt;#IMP  _Nonnull imp#&gt;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS关于weak的实现原理]]></title>
        <id>https://git-hushuai.github.io/post/ios-about-weak</id>
        <link href="https://git-hushuai.github.io/post/ios-about-weak">
        </link>
        <updated>2019-06-11T07:12:30.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h4 id="weak表结构">weak表结构</h4>
<blockquote>
<p>weak_table_t是一个全局weak引用的表，使用对象的地址作为key，用weak_entry_t类型结构体对象作为value。</p>
</blockquote>
<pre><code>objc-weak.h 文件关于weak_table_t结构体定义
/**
 * The global weak references table. Stores object ids as keys,
 * and weak_entry_t structs as their values.
 */
struct weak_table_t {
    weak_entry_t *weak_entries;// 保留了所有指向对象的weak指针
    size_t    num_entries;// weak对象的存储空间
    uintptr_t mask;// 
    uintptr_t max_hash_displacement;
};
</code></pre>
<blockquote>
<p>weak_entry_t 是存储在弱引用表中的一个内部结构体，它负责维护和存储指向一个对象的所有弱引用hash表，其定义如下：</p>
</blockquote>
<pre><code>struct weak_entry_t {
    DisguisedPtr&lt;objc_object&gt; referent;
    union {
        struct {
            weak_referrer_t *referrers;
            uintptr_t        out_of_line_ness : 2;
            uintptr_t        num_refs : PTR_MINUS_2;
            uintptr_t        mask;
            uintptr_t        max_hash_displacement;
        };
        struct {
            // out_of_line_ness field is low bits of inline_referrers[1]
            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];
        };
    };

    bool out_of_line() {
        return (out_of_line_ness == REFERRERS_OUT_OF_LINE);
    }

    weak_entry_t&amp; operator=(const weak_entry_t&amp; other) {
        memcpy(this, &amp;other, sizeof(other));
        return *this;
    }

    weak_entry_t(objc_object *newReferent, objc_object **newReferrer)
        : referent(newReferent)
    {
        inline_referrers[0] = newReferrer;
        for (int i = 1; i &lt; WEAK_INLINE_COUNT; i++) {
            inline_referrers[i] = nil;
        }
    }
};
</code></pre>
<blockquote>
<p>在weak_entry_t 结构体中，DisguisedPtr referent 是对泛型对象的指针做了一层封装，通过这个泛型类来解决内存泄露的问题，
objc_object 是weak_entry_t表中weak弱引用对象的范型对象的结构体。</p>
</blockquote>
<pre><code>struct objc_object {
private:
    isa_t isa;

public:

    // ISA() assumes this is NOT a tagged pointer object
    Class ISA();

    // getIsa() allows this to be a tagged pointer object
    Class getIsa();

    // initIsa() should be used to init the isa of new objects only.
    // If this object already has an isa, use changeIsa() for correctness.
    // initInstanceIsa(): objects with no custom RR/AWZ
    // initClassIsa(): class objects
    // initProtocolIsa(): protocol objects
    // initIsa(): other objects
    void initIsa(Class cls /*nonpointer=false*/);
    void initClassIsa(Class cls /*nonpointer=maybe*/);
    void initProtocolIsa(Class cls /*nonpointer=maybe*/);
    void initInstanceIsa(Class cls, bool hasCxxDtor);

    // changeIsa() should be used to change the isa of existing objects.
    // If this is a new object, use initIsa() for performance.
    Class changeIsa(Class newCls);

    bool hasNonpointerIsa();
    bool isTaggedPointer();
    bool isBasicTaggedPointer();
    bool isExtTaggedPointer();
    bool isClass();

    // object may have associated objects?
    bool hasAssociatedObjects();
    void setHasAssociatedObjects();

    // object may be weakly referenced?
    bool isWeaklyReferenced();
    void setWeaklyReferenced_nolock();

    // object may have -.cxx_destruct implementation?
    bool hasCxxDtor();

    // Optimized calls to retain/release methods
    id retain();
    void release();
    id autorelease();

    // Implementations of retain/release methods
    id rootRetain();
    bool rootRelease();
    id rootAutorelease();
    bool rootTryRetain();
    bool rootReleaseShouldDealloc();
    uintptr_t rootRetainCount();

    // Implementation of dealloc methods
    bool rootIsDeallocating();
    void clearDeallocating();
    void rootDealloc();

private:
    void initIsa(Class newCls, bool nonpointer, bool hasCxxDtor);

    // Slow paths for inline control
    id rootAutorelease2();
    bool overrelease_error();

#if SUPPORT_NONPOINTER_ISA
    // Unified retain count manipulation for nonpointer isa
    id rootRetain(bool tryRetain, bool handleOverflow);
    bool rootRelease(bool performDealloc, bool handleUnderflow);
    id rootRetain_overflow(bool tryRetain);
    bool rootRelease_underflow(bool performDealloc);

    void clearDeallocating_slow();

    // Side table retain count overflow for nonpointer isa
    void sidetable_lock();
    void sidetable_unlock();

    void sidetable_moveExtraRC_nolock(size_t extra_rc, bool isDeallocating, bool weaklyReferenced);
    bool sidetable_addExtraRC_nolock(size_t delta_rc);
    size_t sidetable_subExtraRC_nolock(size_t delta_rc);
    size_t sidetable_getExtraRC_nolock();
#endif

    // Side-table-only retain count
    bool sidetable_isDeallocating();
    void sidetable_clearDeallocating();

    bool sidetable_isWeaklyReferenced();
    void sidetable_setWeaklyReferenced_nolock();

    id sidetable_retain();
    id sidetable_retain_slow(SideTable&amp; table);

    uintptr_t sidetable_release(bool performDealloc = true);
    uintptr_t sidetable_release_slow(SideTable&amp; table, bool performDealloc = true);

    bool sidetable_tryRetain();

    uintptr_t sidetable_retainCount();
#if DEBUG
    bool sidetable_present();
#endif
};
</code></pre>
<h4 id="weak的底层实现原理">weak的底层实现原理</h4>
<p>在runtime源码中的NSObject.mm 文件中找到了关于初始化和管理weak表的方法。</p>
<pre><code> 1 初始化时：runtime会调用objc_initWeak函数，初始化一个新的weak指针指向对象的地址。 
 
 2 添加引用时：objc_initWeak函数会调用 storeWeak() 函数， storeWeak() 的作用是更新指针指
 向，创建对应的弱引用表。 
 
 3 释放时,调用clearDeallocating函数。clearDeallocating函数首先根据对象地址获取所有weak指
 针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象
 的记录。 
</code></pre>
<ol>
<li>初始化</li>
</ol>
<pre><code>/** 
 * Initialize a fresh weak pointer to some object location. 
 * It would be used for code like: 
 *
 * (The nil case) 
 * __weak id weakPtr;
 * (The non-nil case) 
 * NSObject *o = ...;
 * __weak id weakPtr = o;
 * 
 * This function IS NOT thread-safe with respect to concurrent 
 * modifications to the weak variable. (Concurrent weak clear is safe.)
 *
 * @param location Address of __weak ptr. 
 * @param newObj Object ptr. 
 */
id objc_initWeak(id *location, id newObj)
{
    if (!newObj) {
        *location = nil; // newObj 为空时直接把指针释放掉
        return nil;
    }

    return storeWeak&lt;DontHaveOld, DoHaveNew, DoCrashIfDeallocating&gt;
        (location, (objc_object*)newObj); // 存储weak对象
}

</code></pre>
<ol start="2">
<li>更新指针指向，创建对应的弱引用表</li>
</ol>
<p>我们storeWeak表面意思是weak商店，其实weak应该是在storeWeak函数里面进行了进一步的处理，</p>
<pre><code>	
//我们看传参
//1、location地址
//2、newObj新的对象
template &lt;HaveOld haveOld, HaveNew haveNew,
          CrashIfDeallocating crashIfDeallocating&gt;
static id storeWeak(id *location, objc_object *newObj)
{

	assert(haveOld  ||  haveNew);
	if (!haveNew) assert(newObj == nil);
	// 该过程用来更新弱引用指针的指向
	// 初始化 previouslyInitializedClass 指针
	Class previouslyInitializedClass = nil;
	id oldObj;
	
	//声明新旧两个SideTable散列表
	SideTable *oldTable;
	SideTable *newTable;
	// 获得新值和旧值得锁存位置（用地址作为唯一标示）
	// 通过地址来建立索引标志，防止重复
	// 下面
	 
retry:
	if (haveOld) {
		// 更改指针，获得以 oldObj 为索引所存储的值地址
		oldObj = *location;
		oldTable = &amp;SideTables()[oldObj];
	} else {
		oldTable = nil;
	}
	if (haveNew) {
		// 更改新值指针，获得以 newObj 为索引做hash运算得到的SideTable
		newTable = &amp;SideTables()[newObj];
	} else {
		newTable = nil;
	}
	
	// 加锁操作，防止多线程中竞争冲突
	SideTable::lockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);
	// 避免线程冲突重处理
	// location 应该与 oldObj 保持一致，如果不同，说明当前的 location 已经处理过 oldObj 可是又被其他线程所修改
	if (haveOld  &amp;&amp;  *location != oldObj) {
		SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);
		goto retry;
	}
	// 防止弱引用间死锁
	// 并且通过 +initialize 初始化构造器保证弱引用的isa非空指向
	if (haveNew  &amp;&amp;  newObj) {
	   // 获得新对象的isa 指针
		Class cls = newObj-&gt;getIsa();
		// 判断isa 非空且已经初始化
		if (cls != previouslyInitializedClass  &amp;&amp;  
		!((objc_class *)cls)-&gt;isInitialized()) 
	{
		// 解锁
			SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);
		// 对其 isa 指针进行初始化
			_class_initialize(_class_getNonMetaClass(cls, (id)newObj));
		// 如果该类已经完成执行 +initialize 方法是最理想情况
		// 如果该类 +initialize 在线程中
		// 例如 +initialize 正在调用 storeWeak 方法
		// 需要手动对其增加保护策略，并设置 previouslyInitializedClass 指针进行标记
			previouslyInitializedClass = cls;
		
			goto retry;
		}
	}
	//  清除旧值
	if (haveOld) {
		weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);
	}
	
	//  分配新值 
	if (haveNew) {
		newObj = (objc_object *)
		weak_register_no_lock(&amp;newTable-&gt;weak_table, (id)newObj, location, 
		crashIfDeallocating);
	  // 如果弱引用被释放weak_register_no_lock 方法返回nil
	  // 在引用计数表中设置弱引用标记位
	if (newObj  &amp;&amp;  !newObj-&gt;isTaggedPointer()) {
	// 弱引用为初始化操作
	// 
		newObj-&gt;setWeaklyReferenced_nolock();
	}
		*location = (id)newObj;
	}else {
	 
	}
		SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);
		return (id)newObj;
	}
</code></pre>
<p>在NSObject.mm 文件中可以查看到SideTable结构体定义</p>
<pre><code>struct SideTable {
    spinlock_t slock; // 保证原子操作的自旋锁
    RefcountMap refcnts; // 引用计数的hash表
    weak_table_t weak_table; // weak引用全局hash表

    SideTable() {
        memset(&amp;weak_table, 0, sizeof(weak_table));
    }

    ~SideTable() {
        _objc_fatal(&quot;Do not delete SideTable.&quot;);
    }

    void lock() { slock.lock(); }
    void unlock() { slock.unlock(); }
    void forceReset() { slock.forceReset(); }

    // Address-ordered lock discipline for a pair of side tables.

    template&lt;HaveOld, HaveNew&gt;
    static void lockTwo(SideTable *lock1, SideTable *lock2);
    template&lt;HaveOld, HaveNew&gt;
    static void unlockTwo(SideTable *lock1, SideTable *lock2);
};
</code></pre>
<ul>
<li>
<p>通过上面的说明我们可以看到：系统通过一个全局的weak_table_t表，采用hash（哈希表）的方式存储所有的weak对象，使用不定类型对象的地址作为key，用weak_entry_t 类型结构体对象作为value。</p>
</li>
<li>
<p>weak_entry_t （weak_table_t表中hash表的value值，weak对象体）：负责维护和存储指向一个对象的所有弱引用hash表。</p>
</li>
<li>
<p>objc_object (weak_entry_t对象中的范型对象，用于标记weak对象)：标示weak引用的对象。</p>
</li>
</ul>
<h4 id="weak_register_no_lock-底层结构">weak_register_no_lock 底层结构</h4>
<pre><code>/** 
 * Registers a new (object, weak pointer) pair. Creates a new weak
 * object entry if it does not exist.
 * 
 * @param weak_table The global weak table.
 * @param referent The object pointed to by the weak reference.
 * @param referrer The weak pointer address.
 */
id 
weak_register_no_lock(weak_table_t *weak_table, id referent_id, 
                      id *referrer_id, bool crashIfDeallocating)
{
    objc_object *referent = (objc_object *)referent_id;
    objc_object **referrer = (objc_object **)referrer_id;

    if (!referent  ||  referent-&gt;isTaggedPointer()) return referent_id;

    // ensure that the referenced object is viable
    bool deallocating;
    if (!referent-&gt;ISA()-&gt;hasCustomRR()) {
        deallocating = referent-&gt;rootIsDeallocating();
    }
    else {
        BOOL (*allowsWeakReference)(objc_object *, SEL) = 
            (BOOL(*)(objc_object *, SEL))
            object_getMethodImplementation((id)referent, 
                                           SEL_allowsWeakReference);
        if ((IMP)allowsWeakReference == _objc_msgForward) {
            return nil;
        }
        deallocating =
            ! (*allowsWeakReference)(referent, SEL_allowsWeakReference);
    }

    if (deallocating) {
        if (crashIfDeallocating) {
            _objc_fatal(&quot;Cannot form weak reference to instance (%p) of &quot;
                        &quot;class %s. It is possible that this object was &quot;
                        &quot;over-released, or is in the process of deallocation.&quot;,
                        (void*)referent, object_getClassName((id)referent));
        } else {
            return nil;
        }
    }

    // now remember it and where it is being stored
    weak_entry_t *entry;
    if ((entry = weak_entry_for_referent(weak_table, referent))) {
        append_referrer(entry, referrer);
    } 
    else {
        weak_entry_t new_entry(referent, referrer);
        weak_grow_maybe(weak_table);
        weak_entry_insert(weak_table, &amp;new_entry);
    }

    // Do not set *referrer. objc_storeWeak() requires that the 
    // value not change.

    return referent_id;
}
</code></pre>
<h5 id="查看其中关键代码weak_entry_for_referent">查看其中关键代码weak_entry_for_referent:</h5>
<pre><code>/** 
 * Return the weak reference table entry for the given referent. 
 * If there is no entry for referent, return NULL. 
 * Performs a lookup.
 *
 * @param weak_table 
 * @param referent The object. Must not be nil.
 * 
 * @return The table of weak referrers to this object. 
 */
static weak_entry_t *
weak_entry_for_referent(weak_table_t *weak_table, objc_object *referent)
{
    assert(referent);

    weak_entry_t *weak_entries = weak_table-&gt;weak_entries;

    if (!weak_entries) return nil;

    size_t begin = hash_pointer(referent) &amp; weak_table-&gt;mask;
    size_t index = begin;
    size_t hash_displacement = 0;
    while (weak_table-&gt;weak_entries[index].referent != referent) {
        index = (index+1) &amp; weak_table-&gt;mask;
        if (index == begin) bad_weak_table(weak_table-&gt;weak_entries);
        hash_displacement++;
        if (hash_displacement &gt; weak_table-&gt;max_hash_displacement) {
            return nil;
        }
    }
    
    return &amp;weak_table-&gt;weak_entries[index];
}
</code></pre>
<blockquote>
<p>上面代码是找到weak_table-&gt;wak_entries，然后将引用计数对象的地址进行hash化后与weak_table-&gt;mask 做“与“操作，作为下标，在全局weak表中查找，若找到，返回这个对象的weak记录表，若没有，返回nil。</p>
<p>外面拿到这个weak_entry_t *entry,执行append_referer(entry,referer),把这个referer插入到entry里面。</p>
<p>如果返回的这个entry是空的话，就会创建一个新的entry，然后分配空间，最后把这个entry插入weak_table里面的weak_entries数组里面。</p>
</blockquote>
<ul>
<li>初始化弱引用对象流程一览</li>
</ul>
<p>弱引用的初始化，从上文的分析中可以看出，主要的操作部分就在弱引用表的取键、查询散列、创建弱引用表等操作，可以总结如下的流程：</p>
<p><img src="https://git-hushuai.github.io/post-images/1560239988159.png" alt=""></p>
<p>对weak进行存储的过程可以通过下边的流程图详细的描述出来：</p>
<p><img src="https://git-hushuai.github.io/post-images/1560240100561.png" alt=""></p>
<h4 id="weak释放为nil的过程">weak释放为nil的过程</h4>
<blockquote>
<p>weak 被释放为nil，整个对象的释放整体流程为：</p>
</blockquote>
<ul>
<li>1、 调用objc_relase</li>
<li>2、因为对象的引用计数为0，所以执行dealloc</li>
<li>3、在dealloc中，调用了_objc_rootDealloc函数。</li>
</ul>
<pre><code>// Replaced by NSZombies
- (void)dealloc {
    _objc_rootDealloc(self);
}
</code></pre>
<ul>
<li>4、在_objc_rootDealloc中，调用了object_dispose函数</li>
</ul>
<pre><code>// objc-runtime-new.mm 文件
/***********************************************************************
* object_dispose
* fixme
* Locking: none
**********************************************************************/
id 
object_dispose(id obj)
{
    if (!obj) return nil;

    objc_destructInstance(obj);    
    free(obj);

    return nil;
}
</code></pre>
<ul>
<li>5、调用objc_destructInstance</li>
</ul>
<pre><code>// objc-runtime-new.mm 文件
/***********************************************************************
* objc_destructInstance
* Destroys an instance without freeing memory. 
* Calls C++ destructors.
* Calls ARC ivar cleanup.
* Removes associative references.
* Returns `obj`. Does nothing if `obj` is nil.
**********************************************************************/
void *objc_destructInstance(id obj) 
{
    if (obj) {
        // Read all of the flags at once for performance.
        bool cxx = obj-&gt;hasCxxDtor();
        bool assoc = obj-&gt;hasAssociatedObjects();// 

        // This order is important.
        if (cxx) object_cxxDestruct(obj);
        if (assoc) _object_remove_assocations(obj);
        obj-&gt;clearDeallocating();
    }

    return obj;
}
</code></pre>
<ul>
<li>6、调用clearDeallocating。</li>
</ul>
<pre><code>// NSObject.mm 文件
inline void 
objc_object::clearDeallocating()
{
    if (slowpath(!isa.nonpointer)) {
        // Slow path for raw pointer isa.
        sidetable_clearDeallocating();
    }
    else if (slowpath(isa.weakly_referenced  ||  isa.has_sidetable_rc)) {
        // Slow path for non-pointer isa with weak refs and/or side table data.
        clearDeallocating_slow();
    }

    assert(!sidetable_present());
}
</code></pre>
<ul>
<li>7、调用sidetable_clearDeallocating函数</li>
</ul>
<pre><code>// NSObject.mm 文件
void 
objc_object::sidetable_clearDeallocating()
{
    SideTable&amp; table = SideTables()[this];

    // clear any weak table items
    // clear extra retain count and deallocating bit
    // (fixme warn or abort if extra retain count == 0 ?)
    table.lock();
    RefcountMap::iterator it = table.refcnts.find(this);
    if (it != table.refcnts.end()) {
        if (it-&gt;second &amp; SIDE_TABLE_WEAKLY_REFERENCED) {
            weak_clear_no_lock(&amp;table.weak_table, (id)this);
        }
        table.refcnts.erase(it);
    }
    table.unlock();
}
</code></pre>
<ul>
<li>8、调用</li>
</ul>
<pre><code>// NSObject.mm 文件
// Slow path of clearDeallocating() 
// for objects with nonpointer isa
// that were ever weakly referenced 
// or whose retain count ever overflowed to the side table.
NEVER_INLINE void
objc_object::clearDeallocating_slow()
{
    assert(isa.nonpointer  &amp;&amp;  (isa.weakly_referenced || isa.has_sidetable_rc));

    SideTable&amp; table = SideTables()[this];
    table.lock();
    if (isa.weakly_referenced) {
        weak_clear_no_lock(&amp;table.weak_table, (id)this);
    }
    if (isa.has_sidetable_rc) {
        table.refcnts.erase(this);
    }
    table.unlock();
}
</code></pre>
<p>对weak置为nil的操作最终调用执行weak_clear_no_lock方法用于执行置为nil的操作，实现如下</p>
<pre><code>// objc-weak.mm 文件
/** 
 * Called by dealloc; nils out all weak pointers that point to the 
 * provided object so that they can no longer be used.
 * 
 * @param weak_table 
 * @param referent The object being deallocated. 
 */
void 
weak_clear_no_lock(weak_table_t *weak_table, id referent_id) 
{
    objc_object *referent = (objc_object *)referent_id;

    weak_entry_t *entry = weak_entry_for_referent(weak_table, referent);
    if (entry == nil) {
        /// XXX shouldn't happen, but does with mismatched CF/objc
        //printf(&quot;XXX no entry for clear deallocating %p\n&quot;, referent);
        return;
    }

    // zero out references
    weak_referrer_t *referrers;
    size_t count;
    
    if (entry-&gt;out_of_line()) {
        referrers = entry-&gt;referrers;
        count = TABLE_SIZE(entry);
    } 
    else {
        referrers = entry-&gt;inline_referrers;
        count = WEAK_INLINE_COUNT;
    }
    
    for (size_t i = 0; i &lt; count; ++i) {
        objc_object **referrer = referrers[i];
        if (referrer) {
            if (*referrer == referent) {
                *referrer = nil;
            }
            else if (*referrer) {
                _objc_inform(&quot;__weak variable at %p holds %p instead of %p. &quot;
                             &quot;This is probably incorrect use of &quot;
                             &quot;objc_storeWeak() and objc_loadWeak(). &quot;
                             &quot;Break on objc_weak_error to debug.\n&quot;, 
                             referrer, (void*)*referrer, (void*)referent);
                objc_weak_error();
            }
        }
    }
    
    weak_entry_remove(weak_table, entry);
}
</code></pre>
<p>objc_clear_deallocating 该函数的动作如下：</p>
<ul>
<li>1、 从weak表中获取废弃对象的地址为键值得记录。</li>
<li>2、将包含在记录中的所有附有weak修饰符变量的地址，赋值为nil。</li>
<li>3、将weak表中该记录删除。</li>
<li>4、从引用计数中删除废弃对象的地址为键值得记录。</li>
</ul>
]]></content>
    </entry>
</feed>